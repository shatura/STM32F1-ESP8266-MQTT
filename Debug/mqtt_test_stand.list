
mqtt_test_stand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c44  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d0  080059d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080059d0  080059d0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059d0  080059d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080059d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  20000078  08005a50  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200011cc  08005a50  000211cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d28f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002975  00000000  00000000  0002d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0002fca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00030ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001987a  00000000  00000000  00031800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fc9  00000000  00000000  0004b07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b760  00000000  00000000  0005c043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e77a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d88  00000000  00000000  000e77f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d74 	.word	0x08004d74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004d74 	.word	0x08004d74

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000164:	2300      	movs	r3, #0
 8000166:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	7a1b      	ldrb	r3, [r3, #8]
 800016c:	2b03      	cmp	r3, #3
 800016e:	d102      	bne.n	8000176 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* ПЕРЕМЕННАЯ В ЗАВИСИМОТИ ОТ ВЕРСИИ MQTT  */
 8000170:	230c      	movs	r3, #12
 8000172:	60fb      	str	r3, [r7, #12]
 8000174:	e005      	b.n	8000182 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	7a1b      	ldrb	r3, [r3, #8]
 800017a:	2b04      	cmp	r3, #4
 800017c:	d101      	bne.n	8000182 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800017e:	230a      	movs	r3, #10
 8000180:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	330c      	adds	r3, #12
 8000186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800018a:	f000 fb37 	bl	80007fc <MQTTstrlen>
 800018e:	4603      	mov	r3, r0
 8000190:	3302      	adds	r3, #2
 8000192:	68fa      	ldr	r2, [r7, #12]
 8000194:	4413      	add	r3, r2
 8000196:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7edb      	ldrb	r3, [r3, #27]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d013      	beq.n	80001c8 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3324      	adds	r3, #36	; 0x24
 80001a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001a8:	f000 fb28 	bl	80007fc <MQTTstrlen>
 80001ac:	4603      	mov	r3, r0
 80001ae:	1c9c      	adds	r4, r3, #2
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	3330      	adds	r3, #48	; 0x30
 80001b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001b8:	f000 fb20 	bl	80007fc <MQTTstrlen>
 80001bc:	4603      	mov	r3, r0
 80001be:	4423      	add	r3, r4
 80001c0:	3302      	adds	r3, #2
 80001c2:	68fa      	ldr	r2, [r7, #12]
 80001c4:	4413      	add	r3, r2
 80001c6:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d103      	bne.n	80001d8 <MQTTSerialize_connectLength+0x7c>
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d00a      	beq.n	80001ee <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3340      	adds	r3, #64	; 0x40
 80001dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001e0:	f000 fb0c 	bl	80007fc <MQTTstrlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	3302      	adds	r3, #2
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	4413      	add	r3, r2
 80001ec:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d103      	bne.n	80001fe <MQTTSerialize_connectLength+0xa2>
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d00a      	beq.n	8000214 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	334c      	adds	r3, #76	; 0x4c
 8000202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000206:	f000 faf9 	bl	80007fc <MQTTstrlen>
 800020a:	4603      	mov	r3, r0
 800020c:	3302      	adds	r3, #2
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	4413      	add	r3, r2
 8000212:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000214:	68fb      	ldr	r3, [r7, #12]
}
 8000216:	4618      	mov	r0, r3
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	bd90      	pop	{r4, r7, pc}
	...

08000220 <MQTTSerialize_connect>:
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
/*********************************СОЕДИНЕНИЕ*******************************************************/
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000230:	2300      	movs	r3, #0
 8000232:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800023c:	f04f 33ff 	mov.w	r3, #4294967295
 8000240:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f7ff ff8a 	bl	800015c <MQTTSerialize_connectLength>
 8000248:	6238      	str	r0, [r7, #32]
 800024a:	6a38      	ldr	r0, [r7, #32]
 800024c:	f000 f9da 	bl	8000604 <MQTTPacket_len>
 8000250:	4602      	mov	r2, r0
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4293      	cmp	r3, r2
 8000256:	da03      	bge.n	8000260 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000258:	f06f 0301 	mvn.w	r3, #1
 800025c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800025e:	e0c2      	b.n	80003e6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000264:	7e3b      	ldrb	r3, [r7, #24]
 8000266:	2201      	movs	r2, #1
 8000268:	f362 1307 	bfi	r3, r2, #4, #4
 800026c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte);
 800026e:	7e3a      	ldrb	r2, [r7, #24]
 8000270:	f107 031c 	add.w	r3, r7, #28
 8000274:	4611      	mov	r1, r2
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fa37 	bl	80006ea <writeChar>

	ptr += MQTTPacket_encode(ptr, len);
 800027c:	69fb      	ldr	r3, [r7, #28]
 800027e:	6a39      	ldr	r1, [r7, #32]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f955 	bl	8000530 <MQTTPacket_encode>
 8000286:	4602      	mov	r2, r0
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	4413      	add	r3, r2
 800028c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	7a1b      	ldrb	r3, [r3, #8]
 8000292:	2b04      	cmp	r3, #4
 8000294:	d10c      	bne.n	80002b0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	4955      	ldr	r1, [pc, #340]	; (80003f0 <MQTTSerialize_connect+0x1d0>)
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fa60 	bl	8000762 <writeCString>
		writeChar(&ptr, (char) 4);
 80002a2:	f107 031c 	add.w	r3, r7, #28
 80002a6:	2104      	movs	r1, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fa1e 	bl	80006ea <writeChar>
 80002ae:	e00b      	b.n	80002c8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80002b0:	f107 031c 	add.w	r3, r7, #28
 80002b4:	494f      	ldr	r1, [pc, #316]	; (80003f4 <MQTTSerialize_connect+0x1d4>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fa53 	bl	8000762 <writeCString>
		writeChar(&ptr, (char) 3);
 80002bc:	f107 031c 	add.w	r3, r7, #28
 80002c0:	2103      	movs	r1, #3
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fa11 	bl	80006ea <writeChar>
	}

	flags.all = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	7e9b      	ldrb	r3, [r3, #26]
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	7d3b      	ldrb	r3, [r7, #20]
 80002d8:	f362 0341 	bfi	r3, r2, #1, #1
 80002dc:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7edb      	ldrb	r3, [r3, #27]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	bf14      	ite	ne
 80002e6:	2301      	movne	r3, #1
 80002e8:	2300      	moveq	r3, #0
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	7d3b      	ldrb	r3, [r7, #20]
 80002ee:	f362 0382 	bfi	r3, r2, #2, #1
 80002f2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80002f4:	7d3b      	ldrb	r3, [r7, #20]
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d013      	beq.n	8000328 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000306:	f003 0303 	and.w	r3, r3, #3
 800030a:	b2da      	uxtb	r2, r3
 800030c:	7d3b      	ldrb	r3, [r7, #20]
 800030e:	f362 03c4 	bfi	r3, r2, #3, #2
 8000312:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	b2da      	uxtb	r2, r3
 8000320:	7d3b      	ldrb	r3, [r7, #20]
 8000322:	f362 1345 	bfi	r3, r2, #5, #1
 8000326:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800032c:	2b00      	cmp	r3, #0
 800032e:	d103      	bne.n	8000338 <MQTTSerialize_connect+0x118>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000334:	2b00      	cmp	r3, #0
 8000336:	d003      	beq.n	8000340 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8000338:	7d3b      	ldrb	r3, [r7, #20]
 800033a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800033e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000344:	2b00      	cmp	r3, #0
 8000346:	d103      	bne.n	8000350 <MQTTSerialize_connect+0x130>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800034c:	2b00      	cmp	r3, #0
 800034e:	d003      	beq.n	8000358 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8000350:	7d3b      	ldrb	r3, [r7, #20]
 8000352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000356:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8000358:	7d3a      	ldrb	r2, [r7, #20]
 800035a:	f107 031c 	add.w	r3, r7, #28
 800035e:	4611      	mov	r1, r2
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f9c2 	bl	80006ea <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	8b1b      	ldrh	r3, [r3, #24]
 800036a:	461a      	mov	r2, r3
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4611      	mov	r1, r2
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f9cd 	bl	8000712 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f107 001c 	add.w	r0, r7, #28
 800037e:	330c      	adds	r3, #12
 8000380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000382:	f000 fa0d 	bl	80007a0 <writeMQTTString>
	if (options->willFlag)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	7edb      	ldrb	r3, [r3, #27]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00d      	beq.n	80003aa <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f107 001c 	add.w	r0, r7, #28
 8000394:	3324      	adds	r3, #36	; 0x24
 8000396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000398:	f000 fa02 	bl	80007a0 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f107 001c 	add.w	r0, r7, #28
 80003a2:	3330      	adds	r3, #48	; 0x30
 80003a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003a6:	f000 f9fb 	bl	80007a0 <writeMQTTString>
	}
	if (flags.bits.username)
 80003aa:	7d3b      	ldrb	r3, [r7, #20]
 80003ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d006      	beq.n	80003c4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f107 001c 	add.w	r0, r7, #28
 80003bc:	3340      	adds	r3, #64	; 0x40
 80003be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003c0:	f000 f9ee 	bl	80007a0 <writeMQTTString>
	if (flags.bits.password)
 80003c4:	7d3b      	ldrb	r3, [r7, #20]
 80003c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d006      	beq.n	80003de <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f107 001c 	add.w	r0, r7, #28
 80003d6:	334c      	adds	r3, #76	; 0x4c
 80003d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003da:	f000 f9e1 	bl	80007a0 <writeMQTTString>

	rc = ptr - buf;
 80003de:	69fa      	ldr	r2, [r7, #28]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80003e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3728      	adds	r7, #40	; 0x28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	08004d8c 	.word	0x08004d8c
 80003f4:	08004d94 	.word	0x08004d94

080003f8 <MQTTDeserialize_connack>:
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
/****************************************CONNACK***********************************************************************/
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	; 0x28
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	60b9      	str	r1, [r7, #8]
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8000406:	2300      	movs	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800040e:	2300      	movs	r3, #0
 8000410:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800041a:	f107 0318 	add.w	r3, r7, #24
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f950 	bl	80006c4 <readChar>
 8000424:	4603      	mov	r3, r0
 8000426:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8000428:	7f3b      	ldrb	r3, [r7, #28]
 800042a:	f023 030f 	bic.w	r3, r3, #15
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b20      	cmp	r3, #32
 8000432:	d12e      	bne.n	8000492 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8000434:	69bb      	ldr	r3, [r7, #24]
 8000436:	f107 0214 	add.w	r2, r7, #20
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f000 f92b 	bl	8000698 <MQTTPacket_decodeBuf>
 8000442:	6278      	str	r0, [r7, #36]	; 0x24
 8000444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	4413      	add	r3, r2
 800044a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800044c:	69bb      	ldr	r3, [r7, #24]
 800044e:	697a      	ldr	r2, [r7, #20]
 8000450:	4413      	add	r3, r2
 8000452:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	6a3a      	ldr	r2, [r7, #32]
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	2b01      	cmp	r3, #1
 800045c:	dd1b      	ble.n	8000496 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f92e 	bl	80006c4 <readChar>
 8000468:	4603      	mov	r3, r0
 800046a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800046c:	7c3b      	ldrb	r3, [r7, #16]
 800046e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000472:	b2db      	uxtb	r3, r3
 8000474:	461a      	mov	r2, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f920 	bl	80006c4 <readChar>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800048c:	2301      	movs	r3, #1
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
 8000490:	e002      	b.n	8000498 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8000492:	bf00      	nop
 8000494:	e000      	b.n	8000498 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8000496:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800049a:	4618      	mov	r0, r3
 800049c:	3728      	adds	r7, #40	; 0x28
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b088      	sub	sp, #32
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	4613      	mov	r3, r2
 80004ae:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	dc03      	bgt.n	80004cc <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80004c4:	f06f 0301 	mvn.w	r3, #1
 80004c8:	61fb      	str	r3, [r7, #28]
		goto exit;
 80004ca:	e01d      	b.n	8000508 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	7e3b      	ldrb	r3, [r7, #24]
 80004da:	f362 1307 	bfi	r3, r2, #4, #4
 80004de:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte);
 80004e0:	7e3a      	ldrb	r2, [r7, #24]
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 f8fe 	bl	80006ea <writeChar>

	ptr += MQTTPacket_encode(ptr, 0);
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f81c 	bl	8000530 <MQTTPacket_encode>
 80004f8:	4602      	mov	r2, r0
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	4413      	add	r3, r2
 80004fe:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000508:	69fb      	ldr	r3, [r7, #28]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
/**********************ОТКЛЮЧЕНИЕ********************************************/
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 800051c:	220e      	movs	r2, #14
 800051e:	6839      	ldr	r1, [r7, #0]
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff ffbe 	bl	80004a2 <MQTTSerialize_zero>
 8000526:	4603      	mov	r3, r0
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	425a      	negs	r2, r3
 8000542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000546:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800054a:	bf58      	it	pl
 800054c:	4253      	negpl	r3, r2
 800054e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	da00      	bge.n	8000558 <MQTTPacket_encode+0x28>
 8000556:	337f      	adds	r3, #127	; 0x7f
 8000558:	11db      	asrs	r3, r3, #7
 800055a:	603b      	str	r3, [r7, #0]
		/* ЕСЛИ ДЛЯ КОДИРОВАНИЯ НУЖНО БОЛЬШЕ ЦИФР УСТАНОВИТЕ ВЕРХНИЙ БИТ БОЛЬШЕ */
		if (length > 0)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	dd03      	ble.n	800056a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000562:	7afb      	ldrb	r3, [r7, #11]
 8000564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000568:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	60fa      	str	r2, [r7, #12]
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	7afa      	ldrb	r2, [r7, #11]
 8000578:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	dcde      	bgt.n	800053e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MQTTPacket_decode>:
 * @param получает указатель charfn на функцию для чтения следующего символа из источника данных
 * @param значение возвращаемой декодированной длины
 * @возвращает количество байт, считанных из сокета
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
	int len = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	3301      	adds	r3, #1
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	dd03      	ble.n	80005be <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* ОШИБКА ДАННЫХ */
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	60fb      	str	r3, [r7, #12]
			goto exit;
 80005bc:	e01d      	b.n	80005fa <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80005be:	f107 020b 	add.w	r2, r7, #11
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2101      	movs	r1, #1
 80005c6:	4610      	mov	r0, r2
 80005c8:	4798      	blx	r3
 80005ca:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d112      	bne.n	80005f8 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	7afb      	ldrb	r3, [r7, #11]
 80005d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005dc:	6979      	ldr	r1, [r7, #20]
 80005de:	fb01 f303 	mul.w	r3, r1, r3
 80005e2:	441a      	add	r2, r3
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	01db      	lsls	r3, r3, #7
 80005ec:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 80005ee:	7afb      	ldrb	r3, [r7, #11]
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dbd6      	blt.n	80005a4 <MQTTPacket_decode+0x18>
exit:
 80005f6:	e000      	b.n	80005fa <MQTTPacket_decode+0x6e>
			goto exit;
 80005f8:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 80005fa:	693b      	ldr	r3, [r7, #16]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	rem_len += 1;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3301      	adds	r3, #1
 8000610:	607b      	str	r3, [r7, #4]

	if (rem_len < 128)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b7f      	cmp	r3, #127	; 0x7f
 8000616:	dc03      	bgt.n	8000620 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	e012      	b.n	8000646 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000626:	da03      	bge.n	8000630 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3302      	adds	r3, #2
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	e00a      	b.n	8000646 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <MQTTPacket_len+0x50>)
 8000634:	4293      	cmp	r3, r2
 8000636:	dc03      	bgt.n	8000640 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3303      	adds	r3, #3
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	e002      	b.n	8000646 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3304      	adds	r3, #4
 8000644:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000646:	687b      	ldr	r3, [r7, #4]
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	001ffffe 	.word	0x001ffffe

08000658 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	e00a      	b.n	800067e <bufchar+0x26>
		*c = *bufptr++;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <bufchar+0x3c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	4909      	ldr	r1, [pc, #36]	; (8000694 <bufchar+0x3c>)
 8000670:	600a      	str	r2, [r1, #0]
 8000672:	781a      	ldrb	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	429a      	cmp	r2, r3
 8000684:	dbf0      	blt.n	8000668 <bufchar+0x10>
	return count;
 8000686:	683b      	ldr	r3, [r7, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000094 	.word	0x20000094

08000698 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 80006a2:	4a06      	ldr	r2, [pc, #24]	; (80006bc <MQTTPacket_decodeBuf+0x24>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 80006a8:	6839      	ldr	r1, [r7, #0]
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MQTTPacket_decodeBuf+0x28>)
 80006ac:	f7ff ff6e 	bl	800058c <MQTTPacket_decode>
 80006b0:	4603      	mov	r3, r0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000094 	.word	0x20000094
 80006c0:	08000659 	.word	0x08000659

080006c4 <readChar>:
* Считывает один символ из входного буфера.
 * @param pptr указатель на входной буфер - увеличивается на количество использованных и возвращенных байтов
 * @возвращает прочитанный символ
 */
char readChar(unsigned char** pptr)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
	return c;
 80006de:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <writeChar>:
* Записывает один символ в выходной буфер.
 * @param pptr указатель на выходной буфер - увеличивается на количество использованных и возвращенных байтов
 * @param c символ для записи
 */
void writeChar(unsigned char** pptr, char c)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	78fa      	ldrb	r2, [r7, #3]
 80006fc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	601a      	str	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <writeInt>:
* Записывает целое число в виде 2 байт в выходной буфер.
 * @param pptr указатель на выходной буфер - увеличивается на количество использованных и возвращенных байтов
 * @param не является целым числом для записи
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	da00      	bge.n	8000724 <writeInt+0x12>
 8000722:	33ff      	adds	r3, #255	; 0xff
 8000724:	121b      	asrs	r3, r3, #8
 8000726:	461a      	mov	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	425a      	negs	r2, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	bf58      	it	pl
 8000744:	4253      	negpl	r3, r2
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	601a      	str	r2, [r3, #0]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <writeCString>:
Записывает строку "UTF" в выходной буфер. Преобразует строку C в строку с разделителями по длине.
 * @param pptr указатель на выходной буфер - увеличивается на количество использованных и возвращенных байтов
 * @param string строка C для записи
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800076c:	6838      	ldr	r0, [r7, #0]
 800076e:	f7ff fced 	bl	800014c <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000776:	68f9      	ldr	r1, [r7, #12]
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ffca 	bl	8000712 <writeInt>
	memcpy(*pptr, string, len);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	6839      	ldr	r1, [r7, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fe3c 	bl	8004404 <memcpy>
	*pptr += len;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	441a      	add	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	4638      	mov	r0, r7
 80007aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dd12      	ble.n	80007da <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4619      	mov	r1, r3
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff ffaa 	bl	8000712 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68b9      	ldr	r1, [r7, #8]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 fe1c 	bl	8004404 <memcpy>
		*pptr += mqttstring.lenstring.len;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	441a      	add	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 80007d8:	e00c      	b.n	80007f4 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d005      	beq.n	80007ec <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	4619      	mov	r1, r3
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff ffbc 	bl	8000762 <writeCString>
}
 80007ea:	e003      	b.n	80007f4 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f7ff ff8f 	bl	8000712 <writeInt>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <MQTTstrlen>:
* Возвращает длину строки MQTTstring - C, если таковая имеется, в противном случае строка с разделителями длины
 * @param mqttstring строка, возвращающая длину
* @возвращает длину строки
 */
int MQTTstrlen(MQTTString mqttstring)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fc99 	bl	800014c <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e001      	b.n	8000824 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	617b      	str	r3, [r7, #20]
	return rc;
 8000824:	697b      	ldr	r3, [r7, #20]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <MQTTPacket_read>:
* @*@param получить указатель fn на функцию, которая будет считывать любое количество байтов из нужного источника
* @возвращает целочисленный тип пакета MQTT или -1 при ошибке
* @примечание все сообщение должно быть помещено в буфер вызывающего абонента
 */
int MQTTPacket_read(unsigned char* buf, int buflen, int (*getfn)(unsigned char*, int))
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b088      	sub	sp, #32
 8000832:	af00      	add	r7, sp, #0
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
	int rc = -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
	int rem_len = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]

	/* 1. считайте байт заголовка. В нем указан тип пакета */
	if ((*getfn)(buf, 1) != 1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2101      	movs	r1, #1
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	4798      	blx	r3
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d12f      	bne.n	80008ba <MQTTPacket_read+0x8c>
		goto exit;

	len = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
	/* 2. прочитайте оставшуюся длину.  Это само по себе изменчиво */
	MQTTPacket_decode(getfn, &rem_len);
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4619      	mov	r1, r3
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fe91 	bl	800058c <MQTTPacket_decode>
	len += MQTTPacket_encode(buf + 1, rem_len); /* поместите исходную оставшуюся длину обратно в буфер */
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe5c 	bl	8000530 <MQTTPacket_encode>
 8000878:	4602      	mov	r2, r0
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	4413      	add	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]

	/* 3. считайте оставшуюся часть буфера, используя обратный вызов для предоставления остальных данных */
	if((rem_len + len) > buflen)
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	4413      	add	r3, r2
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	429a      	cmp	r2, r3
 800088a:	db18      	blt.n	80008be <MQTTPacket_read+0x90>
		goto exit;
	if (rem_len && ((*getfn)(buf + len, rem_len) != rem_len))
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d00a      	beq.n	80008a8 <MQTTPacket_read+0x7a>
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	441a      	add	r2, r3
 8000898:	6939      	ldr	r1, [r7, #16]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4610      	mov	r0, r2
 800089e:	4798      	blx	r3
 80008a0:	4602      	mov	r2, r0
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d10c      	bne.n	80008c2 <MQTTPacket_read+0x94>
		goto exit;

	header.byte = buf[0];
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	753b      	strb	r3, [r7, #20]
	rc = header.bits.type;
 80008ae:	7d3b      	ldrb	r3, [r7, #20]
 80008b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	e004      	b.n	80008c4 <MQTTPacket_read+0x96>
		goto exit;
 80008ba:	bf00      	nop
 80008bc:	e002      	b.n	80008c4 <MQTTPacket_read+0x96>
		goto exit;
 80008be:	bf00      	nop
 80008c0:	e000      	b.n	80008c4 <MQTTPacket_read+0x96>
		goto exit;
 80008c2:	bf00      	nop
exit:
	return rc;
 80008c4:	69fb      	ldr	r3, [r7, #28]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_DMA_Init+0x38>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <MX_DMA_Init+0x38>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_DMA_Init+0x38>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2010      	movs	r0, #16
 80008f4:	f001 fae5 	bl	8001ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008f8:	2010      	movs	r0, #16
 80008fa:	f001 fafe 	bl	8001efa <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <esp8266_CheckRespond>:

static WIFI_StateTypeDef wifi_state = _OFFLINE;
static WIFI_StateTypeDef trans_state = _UNKNOWN_STATE;
static uint8_t wifi_config_step = 0;
/*********************ПРОВЕРКА ОТВЕТА ESP***********************************/
WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	u1_printf("(DBG:) usart2 ПРОВЕРКА ОТВЕТА:\r\n%s\r\n", USART2_RxBUF);
 8000914:	4910      	ldr	r1, [pc, #64]	; (8000958 <esp8266_CheckRespond+0x4c>)
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <esp8266_CheckRespond+0x50>)
 8000918:	f001 f8d2 	bl	8001ac0 <u1_printf>
	if (strstr((const char*) USART2_RxBUF, (const char*) str) != NULL) {
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	480e      	ldr	r0, [pc, #56]	; (8000958 <esp8266_CheckRespond+0x4c>)
 8000920:	f003 fe92 	bl	8004648 <strstr>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d00a      	beq.n	8000940 <esp8266_CheckRespond+0x34>
		u1_printf("(DBG:) ПОДЛКЮЧЕНИЕ УСПЕШНО\r\n");
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <esp8266_CheckRespond+0x54>)
 800092c:	f001 f8c8 	bl	8001ac0 <u1_printf>
		memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 8000930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000934:	2100      	movs	r1, #0
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <esp8266_CheckRespond+0x4c>)
 8000938:	f003 fd72 	bl	8004420 <memset>
		return _MATCHOK;
 800093c:	2304      	movs	r3, #4
 800093e:	e006      	b.n	800094e <esp8266_CheckRespond+0x42>
	}

	memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 8000940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000944:	2100      	movs	r1, #0
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <esp8266_CheckRespond+0x4c>)
 8000948:	f003 fd6a 	bl	8004420 <memset>
	return _MATCHERROR;
 800094c:	2303      	movs	r3, #3
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000ce8 	.word	0x20000ce8
 800095c:	08004d9c 	.word	0x08004d9c
 8000960:	08004dd0 	.word	0x08004dd0

08000964 <esp8266_TransmitCmd>:
/*********************ПРОВЕРКА ОТВЕТА ESP***********************************/
/*********************ПРОВЕРКА  ОТПРАВКИ ESP***********************************/
WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	74fb      	strb	r3, [r7, #19]
	memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 800097a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097e:	2100      	movs	r1, #0
 8000980:	482b      	ldr	r0, [pc, #172]	; (8000a30 <esp8266_TransmitCmd+0xcc>)
 8000982:	f003 fd4d 	bl	8004420 <memset>
	u1_printf("\r\n(DBG:) ПОПРОБУЙТЕ ОТПРАВИТЬ cmd: %s\r\n", cmd);
 8000986:	68f9      	ldr	r1, [r7, #12]
 8000988:	482a      	ldr	r0, [pc, #168]	; (8000a34 <esp8266_TransmitCmd+0xd0>)
 800098a:	f001 f899 	bl	8001ac0 <u1_printf>
	if (newline == 0)
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d104      	bne.n	800099e <esp8266_TransmitCmd+0x3a>
		u2_transmit("%s", cmd);      // ОТПРАВКА ПО КОНСОЛИ ЧЕРЕЗ USART2
 8000994:	68f9      	ldr	r1, [r7, #12]
 8000996:	4828      	ldr	r0, [pc, #160]	; (8000a38 <esp8266_TransmitCmd+0xd4>)
 8000998:	f001 f8ba 	bl	8001b10 <u2_transmit>
 800099c:	e003      	b.n	80009a6 <esp8266_TransmitCmd+0x42>
	else
		u2_transmit("%s\r\n", cmd); // ОТПРАВКА ПО КОНСОЛИ ЧЕРЕЗ USART2
 800099e:	68f9      	ldr	r1, [r7, #12]
 80009a0:	4826      	ldr	r0, [pc, #152]	; (8000a3c <esp8266_TransmitCmd+0xd8>)
 80009a2:	f001 f8b5 	bl	8001b10 <u2_transmit>

	u1_printf("(DBG:) ОЖИДАНИЕ ОТВЕТА \r\n");
 80009a6:	4826      	ldr	r0, [pc, #152]	; (8000a40 <esp8266_TransmitCmd+0xdc>)
 80009a8:	f001 f88a 	bl	8001ac0 <u1_printf>
	while (timeout--) {
 80009ac:	e01f      	b.n	80009ee <esp8266_TransmitCmd+0x8a>
		// u1_printf("%d ", timeout);
		// finish dma receive
		if (USART2_RecvEndFlag == 1) {
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <esp8266_TransmitCmd+0xe0>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d117      	bne.n	80009e8 <esp8266_TransmitCmd+0x84>
			check = esp8266_CheckRespond(ack);
 80009b8:	68b8      	ldr	r0, [r7, #8]
 80009ba:	f7ff ffa7 	bl	800090c <esp8266_CheckRespond>
 80009be:	4603      	mov	r3, r0
 80009c0:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
 80009c2:	7cfb      	ldrb	r3, [r7, #19]
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d102      	bne.n	80009ce <esp8266_TransmitCmd+0x6a>
				u1_printf("(DBG:)ЦИКЛ ЗАВЕРШЕН\r\n");
 80009c8:	481f      	ldr	r0, [pc, #124]	; (8000a48 <esp8266_TransmitCmd+0xe4>)
 80009ca:	f001 f879 	bl	8001ac0 <u1_printf>
			}

			USART2_RxLen = 0;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <esp8266_TransmitCmd+0xe8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
			USART2_RecvEndFlag = 0;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <esp8266_TransmitCmd+0xe0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, USART2_RxBUF, USART2_MAX_RECVLEN);
 80009da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009de:	4914      	ldr	r1, [pc, #80]	; (8000a30 <esp8266_TransmitCmd+0xcc>)
 80009e0:	481b      	ldr	r0, [pc, #108]	; (8000a50 <esp8266_TransmitCmd+0xec>)
 80009e2:	f002 ff80 	bl	80038e6 <HAL_UART_Receive_DMA>

			break;
 80009e6:	e007      	b.n	80009f8 <esp8266_TransmitCmd+0x94>
		}
		HAL_Delay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f001 f96f 	bl	8001ccc <HAL_Delay>
	while (timeout--) {
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	617a      	str	r2, [r7, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1da      	bne.n	80009ae <esp8266_TransmitCmd+0x4a>
	}

	if (check == _MATCHERROR) {
 80009f8:	7cfb      	ldrb	r3, [r7, #19]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d104      	bne.n	8000a08 <esp8266_TransmitCmd+0xa4>
		u1_printf("\r\n(DBG:) Cmd ОШИБКА\r\n");
 80009fe:	4815      	ldr	r0, [pc, #84]	; (8000a54 <esp8266_TransmitCmd+0xf0>)
 8000a00:	f001 f85e 	bl	8001ac0 <u1_printf>
		return check;
 8000a04:	7cfb      	ldrb	r3, [r7, #19]
 8000a06:	e00e      	b.n	8000a26 <esp8266_TransmitCmd+0xc2>
	}
	if (timeout <= 0) {
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	dc07      	bgt.n	8000a1e <esp8266_TransmitCmd+0xba>
		u1_printf("(DBG:) ЗАГРУЗКА ЗАВЕРШЕНА\r\n");
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <esp8266_TransmitCmd+0xf4>)
 8000a10:	f001 f856 	bl	8001ac0 <u1_printf>
		u1_printf("\r\n(DBG:) ПЕРЕРЫВ\r\n");
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <esp8266_TransmitCmd+0xf8>)
 8000a16:	f001 f853 	bl	8001ac0 <u1_printf>
		return _TIMEOUT;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	e003      	b.n	8000a26 <esp8266_TransmitCmd+0xc2>
	}
	u1_printf("(DBG:) УСПЕШНО\r\n");
 8000a1e:	4810      	ldr	r0, [pc, #64]	; (8000a60 <esp8266_TransmitCmd+0xfc>)
 8000a20:	f001 f84e 	bl	8001ac0 <u1_printf>
	return _SUCCEED;
 8000a24:	2301      	movs	r3, #1
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000ce8 	.word	0x20000ce8
 8000a34:	08004e00 	.word	0x08004e00
 8000a38:	08004e3c 	.word	0x08004e3c
 8000a3c:	08004e40 	.word	0x08004e40
 8000a40:	08004e48 	.word	0x08004e48
 8000a44:	200010e9 	.word	0x200010e9
 8000a48:	08004e70 	.word	0x08004e70
 8000a4c:	200010e8 	.word	0x200010e8
 8000a50:	20001130 	.word	0x20001130
 8000a54:	08004e94 	.word	0x08004e94
 8000a58:	08004eb0 	.word	0x08004eb0
 8000a5c:	08004ee0 	.word	0x08004ee0
 8000a60:	08004efc 	.word	0x08004efc

08000a64 <esp8266_HardwareReset>:
/*********************ПРОВЕРКА ОТПРАВКИ ESP***********************************/
/******************************АППАРАТНЫЙ СБРОС****************************************/
WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a76:	481f      	ldr	r0, [pc, #124]	; (8000af4 <esp8266_HardwareReset+0x90>)
 8000a78:	f001 fe7c 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a80:	f001 f924 	bl	8001ccc <HAL_Delay>
	WIFI_RST_Disable();
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a8a:	481a      	ldr	r0, [pc, #104]	; (8000af4 <esp8266_HardwareReset+0x90>)
 8000a8c:	f001 fe72 	bl	8002774 <HAL_GPIO_WritePin>
	while (timeout--) {
 8000a90:	e01b      	b.n	8000aca <esp8266_HardwareReset+0x66>
		if (USART2_RecvEndFlag == 1) {
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <esp8266_HardwareReset+0x94>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d113      	bne.n	8000ac4 <esp8266_HardwareReset+0x60>

			u1_printf("(DBG:) АППАРАТНЫЙ СБРОС OK!\r\n");
 8000a9c:	4817      	ldr	r0, [pc, #92]	; (8000afc <esp8266_HardwareReset+0x98>)
 8000a9e:	f001 f80f 	bl	8001ac0 <u1_printf>
			HAL_Delay(100);
 8000aa2:	2064      	movs	r0, #100	; 0x64
 8000aa4:	f001 f912 	bl	8001ccc <HAL_Delay>

			USART2_RxLen = 0;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <esp8266_HardwareReset+0x9c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
			USART2_RecvEndFlag = 0;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <esp8266_HardwareReset+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, USART2_RxBUF, USART2_MAX_RECVLEN);
 8000ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab8:	4912      	ldr	r1, [pc, #72]	; (8000b04 <esp8266_HardwareReset+0xa0>)
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <esp8266_HardwareReset+0xa4>)
 8000abc:	f002 ff13 	bl	80038e6 <HAL_UART_Receive_DMA>

			return _SUCCEED;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e013      	b.n	8000aec <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f001 f901 	bl	8001ccc <HAL_Delay>
	while (timeout--) {
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	1e5a      	subs	r2, r3, #1
 8000ace:	60fa      	str	r2, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1de      	bne.n	8000a92 <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	dc07      	bgt.n	8000aea <esp8266_HardwareReset+0x86>
		u1_printf("(DBG:) ЗАГРУЗКА ЗАВЕРШЕНА\r\n");
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <esp8266_HardwareReset+0xa8>)
 8000adc:	f000 fff0 	bl	8001ac0 <u1_printf>
		u1_printf("\r\n(DBG:) ПЕРЕРЫВ\r\n");
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <esp8266_HardwareReset+0xac>)
 8000ae2:	f000 ffed 	bl	8001ac0 <u1_printf>
		return _TIMEOUT;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e000      	b.n	8000aec <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 8000aea:	23ff      	movs	r3, #255	; 0xff
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40010c00 	.word	0x40010c00
 8000af8:	200010e9 	.word	0x200010e9
 8000afc:	08004f14 	.word	0x08004f14
 8000b00:	200010e8 	.word	0x200010e8
 8000b04:	20000ce8 	.word	0x20000ce8
 8000b08:	20001130 	.word	0x20001130
 8000b0c:	08004eb0 	.word	0x08004eb0
 8000b10:	08004ee0 	.word	0x08004ee0

08000b14 <esp8266_ConnectAP>:
/*************************АППАРАТНЫЙ СБРОС************************************/
/*************************ПОДКЛЮЧЕНИЕ К ТОЧКЕ ДОСТУПА****************************************************/
WIFI_StateTypeDef esp8266_ConnectAP() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 8000b1a:	235f      	movs	r3, #95	; 0x5f
 8000b1c:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 fc67 	bl	80043f4 <malloc>
 8000b26:	4603      	mov	r3, r0
 8000b28:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	6838      	ldr	r0, [r7, #0]
 8000b32:	f003 fc75 	bl	8004420 <memset>
	sprintf((char*) cmd, "AT+CWJAP_CUR=\"%s\",\"%s\"", AP_SSID, AP_PSWD); // ПОДКЛЮЧЕНИЕ К ТОЧКЕ ДОСТУПА
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <esp8266_ConnectAP+0x5c>)
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <esp8266_ConnectAP+0x60>)
 8000b3a:	490f      	ldr	r1, [pc, #60]	; (8000b78 <esp8266_ConnectAP+0x64>)
 8000b3c:	6838      	ldr	r0, [r7, #0]
 8000b3e:	f003 fd63 	bl	8004608 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI ПОДКЛЮЧЕН",
 8000b42:	2301      	movs	r3, #1
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <esp8266_ConnectAP+0x68>)
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <esp8266_ConnectAP+0x6c>)
 8000b48:	6838      	ldr	r0, [r7, #0]
 8000b4a:	f7ff ff0b 	bl	8000964 <esp8266_TransmitCmd>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d103      	bne.n	8000b5c <esp8266_ConnectAP+0x48>
			3 * ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
		wifi_state = _ONLINE;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <esp8266_ConnectAP+0x70>)
 8000b56:	2205      	movs	r2, #5
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e002      	b.n	8000b62 <esp8266_ConnectAP+0x4e>
	else
		wifi_state = _OFFLINE;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <esp8266_ConnectAP+0x70>)
 8000b5e:	2206      	movs	r2, #6
 8000b60:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <esp8266_ConnectAP+0x70>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08004f44 	.word	0x08004f44
 8000b74:	08004f58 	.word	0x08004f58
 8000b78:	08004f8c 	.word	0x08004f8c
 8000b7c:	0002fffd 	.word	0x0002fffd
 8000b80:	08004fa4 	.word	0x08004fa4
 8000b84:	20000000 	.word	0x20000000

08000b88 <esp8266_ConnectServer>:
/*************************ПОДКЛЮЧЕНИЕ К ТОЧКЕ ДОСТУПА****************************************************/
/*********************************УСТАНОВКА TCP СОЕДИНЕНИЯ**************************************************/
WIFI_StateTypeDef esp8266_ConnectServer() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 30;
 8000b8e:	2358      	movs	r3, #88	; 0x58
 8000b90:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 fc2d 	bl	80043f4 <malloc>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	6838      	ldr	r0, [r7, #0]
 8000ba6:	f003 fc3b 	bl	8004420 <memset>
	sprintf((char*) cmd, "AT+CIPSTART=\"TCP\",\"%s\",%s", IpServer, ServerPort);
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <esp8266_ConnectServer+0x5c>)
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <esp8266_ConnectServer+0x60>)
 8000bae:	490f      	ldr	r1, [pc, #60]	; (8000bec <esp8266_ConnectServer+0x64>)
 8000bb0:	6838      	ldr	r0, [r7, #0]
 8000bb2:	f003 fd29 	bl	8004608 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "ПОДКЛЮЧЕН", 3 * ESP8266_MAX_TIMEOUT,
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <esp8266_ConnectServer+0x68>)
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <esp8266_ConnectServer+0x6c>)
 8000bbc:	6838      	ldr	r0, [r7, #0]
 8000bbe:	f7ff fed1 	bl	8000964 <esp8266_TransmitCmd>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d103      	bne.n	8000bd0 <esp8266_ConnectServer+0x48>
	WITH_NEWLINE) == _SUCCEED)
		wifi_state = _CONNECTED;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <esp8266_ConnectServer+0x70>)
 8000bca:	2207      	movs	r2, #7
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e002      	b.n	8000bd6 <esp8266_ConnectServer+0x4e>
	else
		wifi_state = _DISCONNECTED;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <esp8266_ConnectServer+0x70>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <esp8266_ConnectServer+0x70>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	08004fbc 	.word	0x08004fbc
 8000be8:	08004fdc 	.word	0x08004fdc
 8000bec:	08004ffc 	.word	0x08004ffc
 8000bf0:	0002fffd 	.word	0x0002fffd
 8000bf4:	08005018 	.word	0x08005018
 8000bf8:	20000000 	.word	0x20000000

08000bfc <esp8266_SetUpTCPConnection>:

WIFI_StateTypeDef esp8266_SetUpTCPConnection() {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	71fb      	strb	r3, [r7, #7]

	/* СБРОС esp8266 */
	u1_printf("(DBG:) ПОПЫТКА СБРОСИТЬ esp8266\r\n");
 8000c06:	48aa      	ldr	r0, [pc, #680]	; (8000eb0 <esp8266_SetUpTCPConnection+0x2b4>)
 8000c08:	f000 ff5a 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 8000c0c:	4ba9      	ldr	r3, [pc, #676]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4ba7      	ldr	r3, [pc, #668]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000c16:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 8000c18:	e019      	b.n	8000c4e <esp8266_SetUpTCPConnection+0x52>
		retry_count++;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c24:	f001 f852 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b0a      	cmp	r3, #10
 8000c2c:	d90f      	bls.n	8000c4e <esp8266_SetUpTCPConnection+0x52>
			u1_printf("(DBG:) ПОПЫТКА СБРОСА НЕ УДАЛАСЬ\r\n");
 8000c2e:	48a2      	ldr	r0, [pc, #648]	; (8000eb8 <esp8266_SetUpTCPConnection+0x2bc>)
 8000c30:	f000 ff46 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 8000c38:	4ba0      	ldr	r3, [pc, #640]	; (8000ebc <esp8266_SetUpTCPConnection+0x2c0>)
 8000c3a:	22ee      	movs	r2, #238	; 0xee
 8000c3c:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 8000c3e:	4b9d      	ldr	r3, [pc, #628]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b9b      	ldr	r3, [pc, #620]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000c48:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e27b      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 8000c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c52:	f7ff ff07 	bl	8000a64 <esp8266_HardwareReset>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d1de      	bne.n	8000c1a <esp8266_SetUpTCPConnection+0x1e>
		}
	}

	HAL_Delay(2000);		// ЖДЕМ 2 СЕКУНДУ
 8000c5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c60:	f001 f834 	bl	8001ccc <HAL_Delay>
	retry_count = 0;		//СБРОС СЧЁТЧИК
 8000c64:	2300      	movs	r3, #0
 8000c66:	71fb      	strb	r3, [r7, #7]

	/* ОТКЛЮЧЕНИЕ ПРОЗРАЧНОЙ ПЕРЕДАЧИ */
	u1_printf("(DBG:) ПОПЫТКА ОТКЛЮЧЕНИЕ ПРОЗРАЧНОЙ ПЕРЕДАЧИ\r\n");
 8000c68:	4895      	ldr	r0, [pc, #596]	; (8000ec0 <esp8266_SetUpTCPConnection+0x2c4>)
 8000c6a:	f000 ff29 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 8000c6e:	4b91      	ldr	r3, [pc, #580]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b8f      	ldr	r3, [pc, #572]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000c78:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(TRANS_QUIT_CMD, TRANS_QUIT_CMD,
 8000c7a:	e016      	b.n	8000caa <esp8266_SetUpTCPConnection+0xae>
	ESP8266_MAX_TIMEOUT,
	WITHOUT_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1500);
 8000c82:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c86:	f001 f821 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b0a      	cmp	r3, #10
 8000c8e:	d90c      	bls.n	8000caa <esp8266_SetUpTCPConnection+0xae>
			u1_printf("(DBG:) ОТКЛЮЧЕНИЕ ПРОЗРАЧНОЙ ПЕРЕДАЧИ ОТКЛОНЕНА\r\n");
 8000c90:	488c      	ldr	r0, [pc, #560]	; (8000ec4 <esp8266_SetUpTCPConnection+0x2c8>)
 8000c92:	f000 ff15 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000c9a:	4b86      	ldr	r3, [pc, #536]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b84      	ldr	r3, [pc, #528]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000ca4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e24d      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_TransmitCmd(TRANS_QUIT_CMD, TRANS_QUIT_CMD,
 8000caa:	2300      	movs	r3, #0
 8000cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb0:	4985      	ldr	r1, [pc, #532]	; (8000ec8 <esp8266_SetUpTCPConnection+0x2cc>)
 8000cb2:	4885      	ldr	r0, [pc, #532]	; (8000ec8 <esp8266_SetUpTCPConnection+0x2cc>)
 8000cb4:	f7ff fe56 	bl	8000964 <esp8266_TransmitCmd>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d1de      	bne.n	8000c7c <esp8266_SetUpTCPConnection+0x80>
		}
	}

	trans_state = _TRANS_DISABLE;
 8000cbe:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <esp8266_SetUpTCPConnection+0x2c0>)
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1500);
 8000cc4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000cc8:	f001 f800 	bl	8001ccc <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИК
 8000ccc:	2300      	movs	r3, #0
 8000cce:	71fb      	strb	r3, [r7, #7]

	/* ЗАКРЫТИЕ echo */
	u1_printf("(DBG:) ПОПЫТКА ЗАКРЫТЬ echo\r\n");
 8000cd0:	487e      	ldr	r0, [pc, #504]	; (8000ecc <esp8266_SetUpTCPConnection+0x2d0>)
 8000cd2:	f000 fef5 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 8000cd6:	4b77      	ldr	r3, [pc, #476]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b75      	ldr	r3, [pc, #468]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000ce0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 8000ce2:	e016      	b.n	8000d12 <esp8266_SetUpTCPConnection+0x116>
			!= _SUCCEED) {
		retry_count++;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cee:	f000 ffed 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b0a      	cmp	r3, #10
 8000cf6:	d90c      	bls.n	8000d12 <esp8266_SetUpTCPConnection+0x116>
			u1_printf("(DBG:) ЗАКРЫТЬ echo ОТКЛЕНЕН\r\n");
 8000cf8:	4875      	ldr	r0, [pc, #468]	; (8000ed0 <esp8266_SetUpTCPConnection+0x2d4>)
 8000cfa:	f000 fee1 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000d02:	4b6c      	ldr	r3, [pc, #432]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b6a      	ldr	r3, [pc, #424]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000d0c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e219      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 8000d12:	2301      	movs	r3, #1
 8000d14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d18:	496e      	ldr	r1, [pc, #440]	; (8000ed4 <esp8266_SetUpTCPConnection+0x2d8>)
 8000d1a:	486f      	ldr	r0, [pc, #444]	; (8000ed8 <esp8266_SetUpTCPConnection+0x2dc>)
 8000d1c:	f7ff fe22 	bl	8000964 <esp8266_TransmitCmd>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d1de      	bne.n	8000ce4 <esp8266_SetUpTCPConnection+0xe8>
		}
	}

	HAL_Delay(100);
 8000d26:	2064      	movs	r0, #100	; 0x64
 8000d28:	f000 ffd0 	bl	8001ccc <HAL_Delay>
	retry_count = 0;		//СБРОС СЧЁТЧИК
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	71fb      	strb	r3, [r7, #7]

	/* УСТАНОВКА WIFI РЕЖИМА 0:AP 1:STA 2:AP+STA */
	u1_printf("(DBG:) ПОПЫТКА УСТАНОВИТЬ WIFI РЕЖИМ\r\n");
 8000d30:	486a      	ldr	r0, [pc, #424]	; (8000edc <esp8266_SetUpTCPConnection+0x2e0>)
 8000d32:	f000 fec5 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 8000d36:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b5d      	ldr	r3, [pc, #372]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000d40:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE_CUR=1", OK_ACK, 500,
 8000d42:	e016      	b.n	8000d72 <esp8266_SetUpTCPConnection+0x176>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	3301      	adds	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4e:	f000 ffbd 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b0a      	cmp	r3, #10
 8000d56:	d90c      	bls.n	8000d72 <esp8266_SetUpTCPConnection+0x176>
			u1_printf("(DBG:) УСТАНОВКА WIFI РЕЖИМА ОТКЛОНЕНА\r\n");
 8000d58:	4861      	ldr	r0, [pc, #388]	; (8000ee0 <esp8266_SetUpTCPConnection+0x2e4>)
 8000d5a:	f000 feb1 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000d62:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b52      	ldr	r3, [pc, #328]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000d6c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e1e9      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE_CUR=1", OK_ACK, 500,
 8000d72:	2301      	movs	r3, #1
 8000d74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d78:	4956      	ldr	r1, [pc, #344]	; (8000ed4 <esp8266_SetUpTCPConnection+0x2d8>)
 8000d7a:	485a      	ldr	r0, [pc, #360]	; (8000ee4 <esp8266_SetUpTCPConnection+0x2e8>)
 8000d7c:	f7ff fdf2 	bl	8000964 <esp8266_TransmitCmd>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d1de      	bne.n	8000d44 <esp8266_SetUpTCPConnection+0x148>
		}
	}

	HAL_Delay(100);
 8000d86:	2064      	movs	r0, #100	; 0x64
 8000d88:	f000 ffa0 	bl	8001ccc <HAL_Delay>
	retry_count = 0;		//СБРОС СЧЁТЧИК
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	71fb      	strb	r3, [r7, #7]

	/* ОТКЛЮЧЕНО АВТОПОДКЛЮЧЕНИЕ */
	u1_printf("(DBG:) ПОПЫТКА ОТКЛЮЧИТЬ АВТОПОДКЛЮЧЕНИЕ\r\n");
 8000d90:	4855      	ldr	r0, [pc, #340]	; (8000ee8 <esp8266_SetUpTCPConnection+0x2ec>)
 8000d92:	f000 fe95 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 8000d96:	4b47      	ldr	r3, [pc, #284]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b45      	ldr	r3, [pc, #276]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000da0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 8000da2:	e016      	b.n	8000dd2 <esp8266_SetUpTCPConnection+0x1d6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	3301      	adds	r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dae:	f000 ff8d 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b0a      	cmp	r3, #10
 8000db6:	d90c      	bls.n	8000dd2 <esp8266_SetUpTCPConnection+0x1d6>
			u1_printf("(DBG:) ОТКЛЮЧЕНИЕ АВТОПОДКЛЮЧЕНИЕ ОТКЛОНЕНО\r\n");
 8000db8:	484c      	ldr	r0, [pc, #304]	; (8000eec <esp8266_SetUpTCPConnection+0x2f0>)
 8000dba:	f000 fe81 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000dc2:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000dcc:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e1b9      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dd8:	493e      	ldr	r1, [pc, #248]	; (8000ed4 <esp8266_SetUpTCPConnection+0x2d8>)
 8000dda:	4845      	ldr	r0, [pc, #276]	; (8000ef0 <esp8266_SetUpTCPConnection+0x2f4>)
 8000ddc:	f7ff fdc2 	bl	8000964 <esp8266_TransmitCmd>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d1de      	bne.n	8000da4 <esp8266_SetUpTCPConnection+0x1a8>
		}
	}

	HAL_Delay(100);
 8000de6:	2064      	movs	r0, #100	; 0x64
 8000de8:	f000 ff70 	bl	8001ccc <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИК
 8000dec:	2300      	movs	r3, #0
 8000dee:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	u1_printf("(DBG:) Trying to connect to AP\r\n");
 8000df0:	4840      	ldr	r0, [pc, #256]	; (8000ef4 <esp8266_SetUpTCPConnection+0x2f8>)
 8000df2:	f000 fe65 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000e00:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 8000e02:	e016      	b.n	8000e32 <esp8266_SetUpTCPConnection+0x236>
		retry_count++;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	3301      	adds	r3, #1
 8000e08:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0e:	f000 ff5d 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b0a      	cmp	r3, #10
 8000e16:	d90c      	bls.n	8000e32 <esp8266_SetUpTCPConnection+0x236>
			u1_printf("(DBG:) Connect to AP failed\r\n");
 8000e18:	4837      	ldr	r0, [pc, #220]	; (8000ef8 <esp8266_SetUpTCPConnection+0x2fc>)
 8000e1a:	f000 fe51 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000e2c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e189      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_ConnectAP() != _ONLINE) {
 8000e32:	f7ff fe6f 	bl	8000b14 <esp8266_ConnectAP>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d1e3      	bne.n	8000e04 <esp8266_SetUpTCPConnection+0x208>
		}
	}

	HAL_Delay(1000);
 8000e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e40:	f000 ff44 	bl	8001ccc <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИК
 8000e44:	2300      	movs	r3, #0
 8000e46:	71fb      	strb	r3, [r7, #7]

	/* ПОПЫТКА ПОЛУЧЕНИЯ AP ИНФОРМАЦИИ */
	if (wifi_state == _ONLINE) {
 8000e48:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <esp8266_SetUpTCPConnection+0x300>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d123      	bne.n	8000e98 <esp8266_SetUpTCPConnection+0x29c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP_CUR?", OK_ACK,
 8000e50:	e018      	b.n	8000e84 <esp8266_SetUpTCPConnection+0x288>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	3301      	adds	r3, #1
 8000e56:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 8000e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5c:	f000 ff36 	bl	8001ccc <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d90e      	bls.n	8000e84 <esp8266_SetUpTCPConnection+0x288>
				u1_printf("(DBG:) ПОЛУЧЕНИЕ AP СООБЩЕНИЕ ОТКЛОНЕНО\r\n");
 8000e66:	4826      	ldr	r0, [pc, #152]	; (8000f00 <esp8266_SetUpTCPConnection+0x304>)
 8000e68:	f000 fe2a 	bl	8001ac0 <u1_printf>
				u1_printf(
 8000e6c:	4825      	ldr	r0, [pc, #148]	; (8000f04 <esp8266_SetUpTCPConnection+0x308>)
 8000e6e:	f000 fe27 	bl	8001ac0 <u1_printf>
						"(DBG:) ПРОЦЕСС ПОДКЛЮЧЕНИЯ СЕРВЕРА НЕ БУДЕТ ЗАВЕРШЕН");
				retry_count = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <esp8266_SetUpTCPConnection+0x2b8>)
 8000e80:	701a      	strb	r2, [r3, #0]
				break;
 8000e82:	e009      	b.n	8000e98 <esp8266_SetUpTCPConnection+0x29c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP_CUR?", OK_ACK,
 8000e84:	2301      	movs	r3, #1
 8000e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8a:	4912      	ldr	r1, [pc, #72]	; (8000ed4 <esp8266_SetUpTCPConnection+0x2d8>)
 8000e8c:	481e      	ldr	r0, [pc, #120]	; (8000f08 <esp8266_SetUpTCPConnection+0x30c>)
 8000e8e:	f7ff fd69 	bl	8000964 <esp8266_TransmitCmd>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d1dc      	bne.n	8000e52 <esp8266_SetUpTCPConnection+0x256>
			}
		}
	}

	HAL_Delay(1000);
 8000e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9c:	f000 ff16 	bl	8001ccc <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИКА
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	71fb      	strb	r3, [r7, #7]

	/* ПОПЫТКА УСТАНОВИТЬ IP ИНФОРМАЦИИ */
	if (wifi_state == _ONLINE) {
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <esp8266_SetUpTCPConnection+0x300>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d152      	bne.n	8000f52 <esp8266_SetUpTCPConnection+0x356>
		while (esp8266_TransmitCmd((uint8_t*) "	AT+CIPSTA_CUR?", OK_ACK,
 8000eac:	e047      	b.n	8000f3e <esp8266_SetUpTCPConnection+0x342>
 8000eae:	bf00      	nop
 8000eb0:	0800502c 	.word	0x0800502c
 8000eb4:	20000098 	.word	0x20000098
 8000eb8:	08005060 	.word	0x08005060
 8000ebc:	20000001 	.word	0x20000001
 8000ec0:	0800509c 	.word	0x0800509c
 8000ec4:	080050f0 	.word	0x080050f0
 8000ec8:	08005148 	.word	0x08005148
 8000ecc:	0800514c 	.word	0x0800514c
 8000ed0:	08005178 	.word	0x08005178
 8000ed4:	080051a8 	.word	0x080051a8
 8000ed8:	080051ac 	.word	0x080051ac
 8000edc:	080051b4 	.word	0x080051b4
 8000ee0:	080051f4 	.word	0x080051f4
 8000ee4:	08005238 	.word	0x08005238
 8000ee8:	08005248 	.word	0x08005248
 8000eec:	08005294 	.word	0x08005294
 8000ef0:	080052e4 	.word	0x080052e4
 8000ef4:	080052f4 	.word	0x080052f4
 8000ef8:	08005318 	.word	0x08005318
 8000efc:	20000000 	.word	0x20000000
 8000f00:	08005338 	.word	0x08005338
 8000f04:	08005380 	.word	0x08005380
 8000f08:	080053e0 	.word	0x080053e0
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 8000f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f16:	f000 fed9 	bl	8001ccc <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d90e      	bls.n	8000f3e <esp8266_SetUpTCPConnection+0x342>
				u1_printf("(DBG:) УСТАНОВКА IP ИНФОРМАЦИИ ОТКЛОНЕНА\r\n");
 8000f20:	488b      	ldr	r0, [pc, #556]	; (8001150 <esp8266_SetUpTCPConnection+0x554>)
 8000f22:	f000 fdcd 	bl	8001ac0 <u1_printf>
				u1_printf(
 8000f26:	488b      	ldr	r0, [pc, #556]	; (8001154 <esp8266_SetUpTCPConnection+0x558>)
 8000f28:	f000 fdca 	bl	8001ac0 <u1_printf>
						"(DBG:) ПРОЦЕСС ПОДКЛЮЧЕНИЯ СЕРВЕРА НЕ БУДЕТ ЗАВЕРШЕН");
				retry_count = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 8000f30:	4b89      	ldr	r3, [pc, #548]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b87      	ldr	r3, [pc, #540]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000f3a:	701a      	strb	r2, [r3, #0]
				break;
 8000f3c:	e009      	b.n	8000f52 <esp8266_SetUpTCPConnection+0x356>
		while (esp8266_TransmitCmd((uint8_t*) "	AT+CIPSTA_CUR?", OK_ACK,
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f44:	4985      	ldr	r1, [pc, #532]	; (800115c <esp8266_SetUpTCPConnection+0x560>)
 8000f46:	4886      	ldr	r0, [pc, #536]	; (8001160 <esp8266_SetUpTCPConnection+0x564>)
 8000f48:	f7ff fd0c 	bl	8000964 <esp8266_TransmitCmd>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d1dc      	bne.n	8000f0c <esp8266_SetUpTCPConnection+0x310>
			}
		}
	}

	HAL_Delay(1000);
 8000f52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f56:	f000 feb9 	bl	8001ccc <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИКА
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]

	/* УСТАНОВКА  DHCP */
	u1_printf("(DBG:) Trying to set DHCP mode\r\n");
 8000f5e:	4881      	ldr	r0, [pc, #516]	; (8001164 <esp8266_SetUpTCPConnection+0x568>)
 8000f60:	f000 fdae 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 8000f64:	4b7c      	ldr	r3, [pc, #496]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b7a      	ldr	r3, [pc, #488]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000f6e:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP_CUR=1,1", OK_ACK, 1000,
 8000f70:	e016      	b.n	8000fa0 <esp8266_SetUpTCPConnection+0x3a4>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	3301      	adds	r3, #1
 8000f76:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7c:	f000 fea6 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b0a      	cmp	r3, #10
 8000f84:	d90c      	bls.n	8000fa0 <esp8266_SetUpTCPConnection+0x3a4>
			u1_printf("(DBG:) УСТАНОВКА DHCP МОДЕЛИ ОТКЛОНЕНА\r\n");
 8000f86:	4878      	ldr	r0, [pc, #480]	; (8001168 <esp8266_SetUpTCPConnection+0x56c>)
 8000f88:	f000 fd9a 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000f90:	4b71      	ldr	r3, [pc, #452]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000f9a:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e0d2      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP_CUR=1,1", OK_ACK, 1000,
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa6:	496d      	ldr	r1, [pc, #436]	; (800115c <esp8266_SetUpTCPConnection+0x560>)
 8000fa8:	4870      	ldr	r0, [pc, #448]	; (800116c <esp8266_SetUpTCPConnection+0x570>)
 8000faa:	f7ff fcdb 	bl	8000964 <esp8266_TransmitCmd>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d1de      	bne.n	8000f72 <esp8266_SetUpTCPConnection+0x376>
		}
	}

	HAL_Delay(1000);
 8000fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb8:	f000 fe88 	bl	8001ccc <HAL_Delay>
	retry_count = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	71fb      	strb	r3, [r7, #7]

	/* УСТАНОВКА ОДИНОЧНОГО СОЕДИНЕНИЕ */
	u1_printf("(DBG:) ПОПЫТКА УСТАНОВКИ ОДИНОЧНОГО СОЕДИНЕНИЯ\r\n");
 8000fc0:	486b      	ldr	r0, [pc, #428]	; (8001170 <esp8266_SetUpTCPConnection+0x574>)
 8000fc2:	f000 fd7d 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 8000fc6:	4b64      	ldr	r3, [pc, #400]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b62      	ldr	r3, [pc, #392]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000fd0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 8000fd2:	e016      	b.n	8001002 <esp8266_SetUpTCPConnection+0x406>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f000 fe75 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b0a      	cmp	r3, #10
 8000fe6:	d90c      	bls.n	8001002 <esp8266_SetUpTCPConnection+0x406>
			u1_printf("(DBG:) УСТАНОВКА ОДИНОЧНОГО СОЕДИНЕНИЯ ОТКЛОНЕНО\r\n");
 8000fe8:	4862      	ldr	r0, [pc, #392]	; (8001174 <esp8266_SetUpTCPConnection+0x578>)
 8000fea:	f000 fd69 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000ff2:	4b59      	ldr	r3, [pc, #356]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b57      	ldr	r3, [pc, #348]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8000ffc:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e0a1      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 8001002:	2301      	movs	r3, #1
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	4954      	ldr	r1, [pc, #336]	; (800115c <esp8266_SetUpTCPConnection+0x560>)
 800100a:	485b      	ldr	r0, [pc, #364]	; (8001178 <esp8266_SetUpTCPConnection+0x57c>)
 800100c:	f7ff fcaa 	bl	8000964 <esp8266_TransmitCmd>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d1de      	bne.n	8000fd4 <esp8266_SetUpTCPConnection+0x3d8>
		}
	}

	HAL_Delay(1000);
 8001016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101a:	f000 fe57 	bl	8001ccc <HAL_Delay>
	retry_count = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]

	/* УСТАНОВКА РЕЖИМА ПРОЗРАЧНОЙ ПЕРЕДАЧИ */
	u1_printf("(DBG:) ПОПЫТКА УСТАНОВИТЬ РЕЖИМ ПРОЗРАЧНОЙ ПЕРЕДАЧИ\r\n");
 8001022:	4856      	ldr	r0, [pc, #344]	; (800117c <esp8266_SetUpTCPConnection+0x580>)
 8001024:	f000 fd4c 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b49      	ldr	r3, [pc, #292]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8001032:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 8001034:	e016      	b.n	8001064 <esp8266_SetUpTCPConnection+0x468>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	3301      	adds	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800103c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001040:	f000 fe44 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b0a      	cmp	r3, #10
 8001048:	d90c      	bls.n	8001064 <esp8266_SetUpTCPConnection+0x468>
			u1_printf("(DBG:) ПРОЦЕСС ПОДКЛЮЧЕНИЯ СЕРВЕРА НЕ БУДЕТ ЗАВЕРШЕН\r\n");
 800104a:	484d      	ldr	r0, [pc, #308]	; (8001180 <esp8266_SetUpTCPConnection+0x584>)
 800104c:	f000 fd38 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3b01      	subs	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 800105e:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8001060:	2300      	movs	r3, #0
 8001062:	e070      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 8001064:	2301      	movs	r3, #1
 8001066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800106a:	493c      	ldr	r1, [pc, #240]	; (800115c <esp8266_SetUpTCPConnection+0x560>)
 800106c:	4845      	ldr	r0, [pc, #276]	; (8001184 <esp8266_SetUpTCPConnection+0x588>)
 800106e:	f7ff fc79 	bl	8000964 <esp8266_TransmitCmd>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d1de      	bne.n	8001036 <esp8266_SetUpTCPConnection+0x43a>
		}
	}

	HAL_Delay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107c:	f000 fe26 	bl	8001ccc <HAL_Delay>
	retry_count = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	71fb      	strb	r3, [r7, #7]

	/* ПОДКЛЮЧЕНИЕ К TCP СЕРВЕРУ */
	u1_printf("(DBG:) ПОПЫТКА ПОДКЛЮЧИТЬСЯ К TCP СЕРВЕРУ\r\n");
 8001084:	4840      	ldr	r0, [pc, #256]	; (8001188 <esp8266_SetUpTCPConnection+0x58c>)
 8001086:	f000 fd1b 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 800108a:	4b33      	ldr	r3, [pc, #204]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b31      	ldr	r3, [pc, #196]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8001094:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectServer() != _CONNECTED) {
 8001096:	e016      	b.n	80010c6 <esp8266_SetUpTCPConnection+0x4ca>
		retry_count++;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	3301      	adds	r3, #1
 800109c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a2:	f000 fe13 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b0a      	cmp	r3, #10
 80010aa:	d90c      	bls.n	80010c6 <esp8266_SetUpTCPConnection+0x4ca>
			u1_printf("(DBG:) ПОДКЛЮЧЕНИЕ К TCP СЕРВЕРУ ОТКЛОНЕНО\r\n");
 80010ac:	4837      	ldr	r0, [pc, #220]	; (800118c <esp8266_SetUpTCPConnection+0x590>)
 80010ae:	f000 fd07 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 80010c0:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e03f      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_ConnectServer() != _CONNECTED) {
 80010c6:	f7ff fd5f 	bl	8000b88 <esp8266_ConnectServer>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b07      	cmp	r3, #7
 80010ce:	d1e3      	bne.n	8001098 <esp8266_SetUpTCPConnection+0x49c>
		}
	}

	HAL_Delay(1000);
 80010d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d4:	f000 fdfa 	bl	8001ccc <HAL_Delay>
	retry_count = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	71fb      	strb	r3, [r7, #7]

	/* ВКЛЮЧЕНИЕ ПЕРЕДАЧИ ДАННЫХ (ПРОЗРАЧНЫЙ РЕЖИМ ПЕРЕДАЧИ) */
	u1_printf("(DBG:) ПОПЫТКА ВКЛЮЧЕНИЕЯ ПЕРЕДАЧИ ДАННЫХ\r\n");
 80010dc:	482c      	ldr	r0, [pc, #176]	; (8001190 <esp8266_SetUpTCPConnection+0x594>)
 80010de:	f000 fcef 	bl	8001ac0 <u1_printf>
	wifi_config_step++;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 80010ec:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSEND", OK_ACK, 1000,
 80010ee:	e016      	b.n	800111e <esp8266_SetUpTCPConnection+0x522>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	3301      	adds	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80010f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fa:	f000 fde7 	bl	8001ccc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b0a      	cmp	r3, #10
 8001102:	d90c      	bls.n	800111e <esp8266_SetUpTCPConnection+0x522>
			u1_printf("(DBG:) УСТАНОВКА ПРОЗРАЧНОГО РЕЖИМА ПЕРЕДАЧИ ОТКЛОНЕНО\r\n");
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <esp8266_SetUpTCPConnection+0x598>)
 8001106:	f000 fcdb 	bl	8001ac0 <u1_printf>
			retry_count = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <esp8266_SetUpTCPConnection+0x55c>)
 8001118:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800111a:	2300      	movs	r3, #0
 800111c:	e013      	b.n	8001146 <esp8266_SetUpTCPConnection+0x54a>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSEND", OK_ACK, 1000,
 800111e:	2301      	movs	r3, #1
 8001120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001124:	490d      	ldr	r1, [pc, #52]	; (800115c <esp8266_SetUpTCPConnection+0x560>)
 8001126:	481c      	ldr	r0, [pc, #112]	; (8001198 <esp8266_SetUpTCPConnection+0x59c>)
 8001128:	f7ff fc1c 	bl	8000964 <esp8266_TransmitCmd>
 800112c:	4603      	mov	r3, r0
 800112e:	2b01      	cmp	r3, #1
 8001130:	d1de      	bne.n	80010f0 <esp8266_SetUpTCPConnection+0x4f4>
		}
	}

	trans_state = _TRANS_ENBALE;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <esp8266_SetUpTCPConnection+0x5a0>)
 8001134:	2209      	movs	r2, #9
 8001136:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8001138:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800113c:	f000 fdc6 	bl	8001ccc <HAL_Delay>
	retry_count = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	71fb      	strb	r3, [r7, #7]

	/* send test msg */
//	u1_printf("Test msg is sending to TCP Server\r\n");
//	u2_transmit("This msg means TCP connection has been set up\r\n");
//	u1_printf("Test msg has been send to TCP Server\r\n");
	return _SUCCEED;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	080053f0 	.word	0x080053f0
 8001154:	08005380 	.word	0x08005380
 8001158:	20000098 	.word	0x20000098
 800115c:	080051a8 	.word	0x080051a8
 8001160:	08005438 	.word	0x08005438
 8001164:	08005448 	.word	0x08005448
 8001168:	0800546c 	.word	0x0800546c
 800116c:	080054b0 	.word	0x080054b0
 8001170:	080054c4 	.word	0x080054c4
 8001174:	0800551c 	.word	0x0800551c
 8001178:	08005578 	.word	0x08005578
 800117c:	08005584 	.word	0x08005584
 8001180:	080055e4 	.word	0x080055e4
 8001184:	08005644 	.word	0x08005644
 8001188:	08005654 	.word	0x08005654
 800118c:	0800569c 	.word	0x0800569c
 8001190:	080056e8 	.word	0x080056e8
 8001194:	08005734 	.word	0x08005734
 8001198:	08005798 	.word	0x08005798
 800119c:	20000001 	.word	0x20000001

080011a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011d2:	f043 0320 	orr.w	r3, r3, #32
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0320 	and.w	r3, r3, #32
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_GPIO_Init+0xd0>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <MX_GPIO_Init+0xd0>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_GPIO_Init+0xd0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121a:	4816      	ldr	r0, [pc, #88]	; (8001274 <MX_GPIO_Init+0xd4>)
 800121c:	f001 faaa 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001226:	4814      	ldr	r0, [pc, #80]	; (8001278 <MX_GPIO_Init+0xd8>)
 8001228:	f001 faa4 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800122c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2302      	movs	r3, #2
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_GPIO_Init+0xd4>)
 8001246:	f001 f911 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800124a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800124e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_GPIO_Init+0xd8>)
 8001264:	f001 f902 	bl	800246c <HAL_GPIO_Init>

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	40011000 	.word	0x40011000
 8001278:	40010c00 	.word	0x40010c00

0800127c <LED_On>:
#include "led.h"

uint8_t LED_State = LED_State_Off;
/*************************ВКЛ СВЕТОДИОДА***************************************/
void LED_On() {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	LED_State = LED_State_On;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <LED_On+0x1c>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_State_On);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <LED_On+0x20>)
 800128e:	f001 fa71 	bl	8002774 <HAL_GPIO_WritePin>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000002 	.word	0x20000002
 800129c:	40011000 	.word	0x40011000

080012a0 <LED_Off>:
/*************************ВКЛ СВЕТОДИОДА***************************************/
/*************************ВЫКЛ СВЕТОДИОДА**************************************/
void LED_Off() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	LED_State = LED_State_Off;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <LED_Off+0x1c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_State_Off);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <LED_Off+0x20>)
 80012b2:	f001 fa5f 	bl	8002774 <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000002 	.word	0x20000002
 80012c0:	40011000 	.word	0x40011000

080012c4 <LED_Blink>:
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_State_On);
	}
}
/************************ПЕРЕКЛЮЧЕНИЕ СОСТОЯНИЯ СВЕТОДИОДА********************/
/************************МЕРЦАНИЕ СВЕТОДИОДА**********************************/
void LED_Blink(uint8_t times, uint16_t interval, uint8_t finalState) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	460b      	mov	r3, r1
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	71bb      	strb	r3, [r7, #6]
	while (times > 0) {
 80012d6:	e00e      	b.n	80012f6 <LED_Blink+0x32>
		LED_Off();
 80012d8:	f7ff ffe2 	bl	80012a0 <LED_Off>
		HAL_Delay(interval);
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fcf4 	bl	8001ccc <HAL_Delay>
		LED_On();
 80012e4:	f7ff ffca 	bl	800127c <LED_On>
		HAL_Delay(interval);
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fcee 	bl	8001ccc <HAL_Delay>
		times--;
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	71fb      	strb	r3, [r7, #7]
	while (times > 0) {
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ed      	bne.n	80012d8 <LED_Blink+0x14>
	}

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, finalState);
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	461a      	mov	r2, r3
 8001300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <LED_Blink+0x54>)
 8001306:	f001 fa35 	bl	8002774 <HAL_GPIO_WritePin>
	LED_State = finalState;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <LED_Blink+0x58>)
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	7013      	strb	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40011000 	.word	0x40011000
 800131c:	20000002 	.word	0x20000002

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fc70 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f842 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f7ff ff38 	bl	80011a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001330:	f7ff face 	bl	80008d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001334:	f000 faa2 	bl	800187c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001338:	f000 faca 	bl	80018d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800133c:	f000 fa22 	bl	8001784 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	u1_printf("(DBG:) System Enable!\r\n");
 8001340:	4817      	ldr	r0, [pc, #92]	; (80013a0 <main+0x80>)
 8001342:	f000 fbbd 	bl	8001ac0 <u1_printf>
	LED_Blink(3, 200, LED_Final_Off);
 8001346:	2201      	movs	r2, #1
 8001348:	21c8      	movs	r1, #200	; 0xc8
 800134a:	2003      	movs	r0, #3
 800134c:	f7ff ffba 	bl	80012c4 <LED_Blink>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (esp8266_SetUpTCPConnection() == _SUCCEED) { //ЕСЛИ ПОДКЛЮЧЕНИЕ К СЕРВЕРУ УСПЕШНО ТО СЧЁТЧИК СБРАСЫВАЕТ, ИНАЧЕ МЕРЦАЕТ СВЕТОДИОД И УВЕЛ ЗНАЧ. СЧЁТЧИКА
 8001350:	f7ff fc54 	bl	8000bfc <esp8266_SetUpTCPConnection>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d103      	bne.n	8001362 <main+0x42>
	  			retry_count = 0;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <main+0x84>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
	  			break;
 8001360:	e013      	b.n	800138a <main+0x6a>
	  		}
	  		LED_Blink(3, 200, LED_Final_Off);
 8001362:	2201      	movs	r2, #1
 8001364:	21c8      	movs	r1, #200	; 0xc8
 8001366:	2003      	movs	r0, #3
 8001368:	f7ff ffac 	bl	80012c4 <LED_Blink>
	  		retry_count++;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <main+0x84>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <main+0x84>)
 8001376:	701a      	strb	r2, [r3, #0]
	  		if (retry_count >= 10) { // ЕСЛИ ЗНАЧЕНИЕ СЧЕТЧИКА ПРЕВЫСИЛИ 10, ТО ОТПРАВИТЬ СООБЩЕНИЕ В КОНСОЛЬ
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <main+0x84>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b09      	cmp	r3, #9
 800137e:	d9e7      	bls.n	8001350 <main+0x30>
	  			u1_printf("(DBG:) esp8266 ПОДКЛЮЧЕНИЕ К СЕРВЕРУ ОТКЛОНЕНО\r\n");
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <main+0x88>)
 8001382:	f000 fb9d 	bl	8001ac0 <u1_printf>
	  			LED_On();
 8001386:	f7ff ff79 	bl	800127c <LED_On>
	  			break;
	  		}
	  	}

	  	if (mqtt_ConnectServer() != 1) {
 800138a:	f000 f8a3 	bl	80014d4 <mqtt_ConnectServer>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d004      	beq.n	800139e <main+0x7e>
	  		u1_printf("(DBG:) ПОДКЛЮЧЕНИЕ К MQTT СЕРВЕРУ ОТКЛОНЕНО\r\n");
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <main+0x8c>)
 8001396:	f000 fb93 	bl	8001ac0 <u1_printf>
	  		LED_On();
 800139a:	f7ff ff6f 	bl	800127c <LED_On>
	  	}

	  	while (1) {
 800139e:	e7fe      	b.n	800139e <main+0x7e>
 80013a0:	080057a4 	.word	0x080057a4
 80013a4:	20000099 	.word	0x20000099
 80013a8:	080057bc 	.word	0x080057bc
 80013ac:	0800580c 	.word	0x0800580c

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b090      	sub	sp, #64	; 0x40
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	2228      	movs	r2, #40	; 0x28
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 f82e 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 f9d3 	bl	80027a4 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001404:	f000 f819 	bl	800143a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2302      	movs	r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fc40 	bl	8002ca8 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800142e:	f000 f804 	bl	800143a <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3740      	adds	r7, #64	; 0x40
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143e:	b672      	cpsid	i
}
 8001440:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001442:	e7fe      	b.n	8001442 <Error_Handler+0x8>

08001444 <mqtt_transport_sendPacketBuffer>:
uint32_t mqtt_msgId = 0;

int mqtt_buflen = MQTT_PacketBuffSize;
uint8_t mqtt_PacketBuf[MQTT_PacketBuffSize];
/***********************ОТПРАВКА БУФЕР ПАКЕТА*****************************************/
int mqtt_transport_sendPacketBuffer(uint8_t *buf, int buflen) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]

	// MQTT Head may have 0x00
	USART2_RecvEndFlag = 0;
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <mqtt_transport_sendPacketBuffer+0x34>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 8001454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001458:	2100      	movs	r1, #0
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <mqtt_transport_sendPacketBuffer+0x38>)
 800145c:	f002 ffe0 	bl	8004420 <memset>
	HAL_UART_Transmit(&huart2, buf, buflen, 0xff);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b29a      	uxth	r2, r3
 8001464:	23ff      	movs	r3, #255	; 0xff
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <mqtt_transport_sendPacketBuffer+0x3c>)
 800146a:	f002 f9aa 	bl	80037c2 <HAL_UART_Transmit>

	return buflen;
 800146e:	683b      	ldr	r3, [r7, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200010e9 	.word	0x200010e9
 800147c:	20000ce8 	.word	0x20000ce8
 8001480:	20001130 	.word	0x20001130

08001484 <mqtt_transport_getdata>:
/***********************ОТПРАВКА БУФЕР ПАКЕТА*****************************************/
/***********************ОТПРАВКА ПОЛУЧЕННЫХ ДАННЫХ************************************/
int mqtt_transport_getdata(uint8_t *buf, int buflen) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]

	if (MQTT_RecvEndFlag == 1) {
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <mqtt_transport_getdata+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d111      	bne.n	80014bc <mqtt_transport_getdata+0x38>
		memcpy(buf, (const char*) USART2_RxBUF, buflen);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	490b      	ldr	r1, [pc, #44]	; (80014cc <mqtt_transport_getdata+0x48>)
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f002 ffb0 	bl	8004404 <memcpy>

		USART2_RxLen = 0;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <mqtt_transport_getdata+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
		USART2_RecvEndFlag = 0;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <mqtt_transport_getdata+0x44>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
		memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 80014b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b4:	2100      	movs	r1, #0
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <mqtt_transport_getdata+0x48>)
 80014b8:	f002 ffb2 	bl	8004420 <memset>
	}

	return buflen;
 80014bc:	683b      	ldr	r3, [r7, #0]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200010e9 	.word	0x200010e9
 80014cc:	20000ce8 	.word	0x20000ce8
 80014d0:	200010e8 	.word	0x200010e8

080014d4 <mqtt_ConnectServer>:
/***************************ОТПРАВКА ЗАКРЫТА******************************************/
int mqtt_transport_close(int sock) {
	return 0;
}
/***************************ОТПРАВКА ЗАКРРЫТА******************************************/
uint8_t mqtt_ConnectServer() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b098      	sub	sp, #96	; 0x60
 80014d8:	af00      	add	r7, sp, #0

	uint8_t responMsg = 0xff;
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t sessionPresent = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t connack_rc = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	mqtt_buflen = sizeof(mqtt_PacketBuf);
 80014ec:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <mqtt_ConnectServer+0x104>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	601a      	str	r2, [r3, #0]

	MQTTPacket_connectData ConnectData = MQTTPacket_connectData_initializer;
 80014f4:	4a39      	ldr	r2, [pc, #228]	; (80015dc <mqtt_ConnectServer+0x108>)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4611      	mov	r1, r2
 80014fa:	2258      	movs	r2, #88	; 0x58
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 ff81 	bl	8004404 <memcpy>
	ConnectData.clientID.cstring = MQTT_CLIENTID;
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <mqtt_ConnectServer+0x10c>)
 8001504:	613b      	str	r3, [r7, #16]
	ConnectData.username.cstring = MQTT_USERNAME;
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <mqtt_ConnectServer+0x110>)
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
	ConnectData.password.cstring = MQTT_PASSWORD;
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <mqtt_ConnectServer+0x114>)
 800150c:	653b      	str	r3, [r7, #80]	; 0x50
	ConnectData.keepAliveInterval = MQTT_KeepAliveInterval;
 800150e:	233c      	movs	r3, #60	; 0x3c
 8001510:	83bb      	strh	r3, [r7, #28]
	ConnectData.MQTTVersion = 4;
 8001512:	2304      	movs	r3, #4
 8001514:	733b      	strb	r3, [r7, #12]
	ConnectData.cleansession = 1;
 8001516:	2301      	movs	r3, #1
 8001518:	77bb      	strb	r3, [r7, #30]

	u1_printf("(DBG:) ПОПЫТКА ПОДКЛЮЧИТЬСЯ MQTT СЕРВЕРУ\r\n\n");
 800151a:	4834      	ldr	r0, [pc, #208]	; (80015ec <mqtt_ConnectServer+0x118>)
 800151c:	f000 fad0 	bl	8001ac0 <u1_printf>

	// ИСПОЛЬЗОВАНИЕ CONNACK В КАЧЕСТВЕ ДЛИННЫ
	connack_rc = MQTTSerialize_connect(mqtt_PacketBuf, mqtt_buflen,
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <mqtt_ConnectServer+0x104>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1d3a      	adds	r2, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4831      	ldr	r0, [pc, #196]	; (80015f0 <mqtt_ConnectServer+0x11c>)
 800152a:	f7fe fe79 	bl	8000220 <MQTTSerialize_connect>
 800152e:	4603      	mov	r3, r0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			&ConnectData); // СБОРКА ПАКЕТА ПОДКЛЮЧЕНИЯ
	mqtt_transport_sendPacketBuffer(mqtt_PacketBuf, connack_rc);
 8001536:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800153a:	4619      	mov	r1, r3
 800153c:	482c      	ldr	r0, [pc, #176]	; (80015f0 <mqtt_ConnectServer+0x11c>)
 800153e:	f7ff ff81 	bl	8001444 <mqtt_transport_sendPacketBuffer>

	do {
		while (responMsg != CONNACK) {
 8001542:	e009      	b.n	8001558 <mqtt_ConnectServer+0x84>
			responMsg = MQTTPacket_read(mqtt_PacketBuf, mqtt_buflen,
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <mqtt_ConnectServer+0x104>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a2a      	ldr	r2, [pc, #168]	; (80015f4 <mqtt_ConnectServer+0x120>)
 800154a:	4619      	mov	r1, r3
 800154c:	4828      	ldr	r0, [pc, #160]	; (80015f0 <mqtt_ConnectServer+0x11c>)
 800154e:	f7ff f96e 	bl	800082e <MQTTPacket_read>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while (responMsg != CONNACK) {
 8001558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800155c:	2b02      	cmp	r3, #2
 800155e:	d1f1      	bne.n	8001544 <mqtt_ConnectServer+0x70>
					mqtt_transport_getdata);
		}

		HAL_UART_Receive_DMA(&huart2, USART2_RxBUF, USART2_MAX_RECVLEN);
 8001560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001564:	4924      	ldr	r1, [pc, #144]	; (80015f8 <mqtt_ConnectServer+0x124>)
 8001566:	4825      	ldr	r0, [pc, #148]	; (80015fc <mqtt_ConnectServer+0x128>)
 8001568:	f002 f9bd 	bl	80038e6 <HAL_UART_Receive_DMA>

	} while (MQTTDeserialize_connack(&sessionPresent, &connack_rc,
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <mqtt_ConnectServer+0x104>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f107 015d 	add.w	r1, r7, #93	; 0x5d
 8001574:	f107 005e 	add.w	r0, r7, #94	; 0x5e
 8001578:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <mqtt_ConnectServer+0x11c>)
 800157a:	f7fe ff3d 	bl	80003f8 <MQTTDeserialize_connack>
 800157e:	4603      	mov	r3, r0
			mqtt_PacketBuf, mqtt_buflen) != 1 || connack_rc != 0);
 8001580:	2b01      	cmp	r3, #1
 8001582:	d1e9      	bne.n	8001558 <mqtt_ConnectServer+0x84>
 8001584:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e5      	bne.n	8001558 <mqtt_ConnectServer+0x84>

	if (connack_rc != 0) {
 800158c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <mqtt_ConnectServer+0xcc>
		u1_printf("connack_rc:%uc\r\n", connack_rc);
 8001594:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001598:	4619      	mov	r1, r3
 800159a:	4819      	ldr	r0, [pc, #100]	; (8001600 <mqtt_ConnectServer+0x12c>)
 800159c:	f000 fa90 	bl	8001ac0 <u1_printf>
	}

	u1_printf("ПОДКЛЮЧЕНИЕ УСПЕШНО!\r\n");
 80015a0:	4818      	ldr	r0, [pc, #96]	; (8001604 <mqtt_ConnectServer+0x130>)
 80015a2:	f000 fa8d 	bl	8001ac0 <u1_printf>

	HAL_Delay(3000);
 80015a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015aa:	f000 fb8f 	bl	8001ccc <HAL_Delay>
	connack_rc = MQTTSerialize_disconnect(mqtt_PacketBuf, mqtt_buflen);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <mqtt_ConnectServer+0x104>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <mqtt_ConnectServer+0x11c>)
 80015b6:	f7fe ffac 	bl	8000512 <MQTTSerialize_disconnect>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	mqtt_transport_sendPacketBuffer(mqtt_PacketBuf, connack_rc);
 80015c2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80015c6:	4619      	mov	r1, r3
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <mqtt_ConnectServer+0x11c>)
 80015ca:	f7ff ff3b 	bl	8001444 <mqtt_transport_sendPacketBuffer>

	return 1;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3760      	adds	r7, #96	; 0x60
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000004 	.word	0x20000004
 80015dc:	0800591c 	.word	0x0800591c
 80015e0:	08005858 	.word	0x08005858
 80015e4:	08005870 	.word	0x08005870
 80015e8:	08005880 	.word	0x08005880
 80015ec:	08005894 	.word	0x08005894
 80015f0:	2000009c 	.word	0x2000009c
 80015f4:	08001485 	.word	0x08001485
 80015f8:	20000ce8 	.word	0x20000ce8
 80015fc:	20001130 	.word	0x20001130
 8001600:	080058dc 	.word	0x080058dc
 8001604:	080058f0 	.word	0x080058f0

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <HAL_MspInit+0x5c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_MspInit+0x5c>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x60>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_MspInit+0x60>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <NMI_Handler+0x4>

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b2:	f000 faef 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA1_Channel6_IRQHandler+0x10>)
 80016c2:	f000 fd9f 	bl	8002204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20001174 	.word	0x20001174

080016d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <TIM2_IRQHandler+0x10>)
 80016d6:	f001 fcce 	bl	8003076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200004a0 	.word	0x200004a0

080016e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <USART1_IRQHandler+0x10>)
 80016ea:	f002 f92d 	bl	8003948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200010ec 	.word	0x200010ec

080016f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <USART2_IRQHandler+0x10>)
 80016fe:	f002 f923 	bl	8003948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20001130 	.word	0x20001130

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f002 fe30 	bl	80043a0 <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20005000 	.word	0x20005000
 800176c:	00000800 	.word	0x00000800
 8001770:	2000049c 	.word	0x2000049c
 8001774:	200011d0 	.word	0x200011d0

08001778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_TIM2_Init+0x98>)
 80017a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_TIM2_Init+0x98>)
 80017aa:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80017ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_TIM2_Init+0x98>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <MX_TIM2_Init+0x98>)
 80017b8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80017bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_TIM2_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_TIM2_Init+0x98>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ca:	4814      	ldr	r0, [pc, #80]	; (800181c <MX_TIM2_Init+0x98>)
 80017cc:	f001 fc04 	bl	8002fd8 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017d6:	f7ff fe30 	bl	800143a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	4619      	mov	r1, r3
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <MX_TIM2_Init+0x98>)
 80017e8:	f001 fd4d 	bl	8003286 <HAL_TIM_ConfigClockSource>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017f2:	f7ff fe22 	bl	800143a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	4619      	mov	r1, r3
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <MX_TIM2_Init+0x98>)
 8001804:	f001 ff20 	bl	8003648 <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800180e:	f7ff fe14 	bl	800143a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200004a0 	.word	0x200004a0

08001820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001830:	d113      	bne.n	800185a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2101      	movs	r1, #1
 800184e:	201c      	movs	r0, #28
 8001850:	f000 fb37 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001854:	201c      	movs	r0, #28
 8001856:	f000 fb50 	bl	8001efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM2)
    {

    }
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
	...

0800187c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_USART1_UART_Init+0x4c>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_USART1_UART_Init+0x50>)
 8001884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_USART1_UART_Init+0x4c>)
 8001888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800188c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USART1_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_USART1_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USART1_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_USART1_UART_Init+0x4c>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USART1_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_USART1_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_USART1_UART_Init+0x4c>)
 80018b4:	f001 ff38 	bl	8003728 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018be:	f7ff fdbc 	bl	800143a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200010ec 	.word	0x200010ec
 80018cc:	40013800 	.word	0x40013800

080018d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MX_USART2_UART_Init+0x68>)
 80018d6:	4a19      	ldr	r2, [pc, #100]	; (800193c <MX_USART2_UART_Init+0x6c>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_USART2_UART_Init+0x68>)
 80018dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_USART2_UART_Init+0x68>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_USART2_UART_Init+0x68>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_USART2_UART_Init+0x68>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_USART2_UART_Init+0x68>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_USART2_UART_Init+0x68>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <MX_USART2_UART_Init+0x68>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001906:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_USART2_UART_Init+0x68>)
 8001908:	f001 ff0e 	bl	8003728 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001912:	f7ff fd92 	bl	800143a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART2_UART_Init+0x68>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART2_UART_Init+0x68>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0210 	orr.w	r2, r2, #16
 8001924:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart2, USART2_RxBUF, USART2_MAX_RECVLEN);
 8001926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192a:	4905      	ldr	r1, [pc, #20]	; (8001940 <MX_USART2_UART_Init+0x70>)
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <MX_USART2_UART_Init+0x68>)
 800192e:	f001 ffda 	bl	80038e6 <HAL_UART_Receive_DMA>
  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20001130 	.word	0x20001130
 800193c:	40004400 	.word	0x40004400
 8001940:	20000ce8 	.word	0x20000ce8

08001944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_UART_MspInit+0x164>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d13a      	bne.n	80019da <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001964:	4b51      	ldr	r3, [pc, #324]	; (8001aac <HAL_UART_MspInit+0x168>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a50      	ldr	r2, [pc, #320]	; (8001aac <HAL_UART_MspInit+0x168>)
 800196a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b4e      	ldr	r3, [pc, #312]	; (8001aac <HAL_UART_MspInit+0x168>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_UART_MspInit+0x168>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_UART_MspInit+0x168>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b48      	ldr	r3, [pc, #288]	; (8001aac <HAL_UART_MspInit+0x168>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0318 	add.w	r3, r7, #24
 80019a6:	4619      	mov	r1, r3
 80019a8:	4841      	ldr	r0, [pc, #260]	; (8001ab0 <HAL_UART_MspInit+0x16c>)
 80019aa:	f000 fd5f 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	4619      	mov	r1, r3
 80019c2:	483b      	ldr	r0, [pc, #236]	; (8001ab0 <HAL_UART_MspInit+0x16c>)
 80019c4:	f000 fd52 	bl	800246c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2103      	movs	r1, #3
 80019cc:	2025      	movs	r0, #37	; 0x25
 80019ce:	f000 fa78 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019d2:	2025      	movs	r0, #37	; 0x25
 80019d4:	f000 fa91 	bl	8001efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019d8:	e062      	b.n	8001aa0 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a35      	ldr	r2, [pc, #212]	; (8001ab4 <HAL_UART_MspInit+0x170>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d15d      	bne.n	8001aa0 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_UART_MspInit+0x168>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	4a30      	ldr	r2, [pc, #192]	; (8001aac <HAL_UART_MspInit+0x168>)
 80019ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ee:	61d3      	str	r3, [r2, #28]
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_UART_MspInit+0x168>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_UART_MspInit+0x168>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a2a      	ldr	r2, [pc, #168]	; (8001aac <HAL_UART_MspInit+0x168>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_UART_MspInit+0x168>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a14:	2304      	movs	r3, #4
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0318 	add.w	r3, r7, #24
 8001a24:	4619      	mov	r1, r3
 8001a26:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <HAL_UART_MspInit+0x16c>)
 8001a28:	f000 fd20 	bl	800246c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	481c      	ldr	r0, [pc, #112]	; (8001ab0 <HAL_UART_MspInit+0x16c>)
 8001a40:	f000 fd14 	bl	800246c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a46:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_UART_MspInit+0x178>)
 8001a48:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a74:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a76:	f000 fa5b 	bl	8001f30 <HAL_DMA_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001a80:	f7ff fcdb 	bl	800143a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a0c      	ldr	r2, [pc, #48]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <HAL_UART_MspInit+0x174>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2102      	movs	r1, #2
 8001a94:	2026      	movs	r0, #38	; 0x26
 8001a96:	f000 fa14 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a9a:	2026      	movs	r0, #38	; 0x26
 8001a9c:	f000 fa2d 	bl	8001efa <HAL_NVIC_EnableIRQ>
}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40004400 	.word	0x40004400
 8001ab8:	20001174 	.word	0x20001174
 8001abc:	4002006c 	.word	0x4002006c

08001ac0 <u1_printf>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void u1_printf(char *fmt, ...) {
 8001ac0:	b40f      	push	{r0, r1, r2, r3}
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
	uint16_t i;
	va_list ap;
	va_start(ap, fmt);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	603b      	str	r3, [r7, #0]
	vsprintf((char*) USART1_TxBUF, fmt, ap);
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	6939      	ldr	r1, [r7, #16]
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <u1_printf+0x48>)
 8001ad4:	f002 fde4 	bl	80046a0 <vsiprintf>
	va_end(ap);
	i = strlen((const char*) USART1_TxBUF);
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <u1_printf+0x48>)
 8001ada:	f7fe fb37 	bl	800014c <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, USART1_TxBUF, i, 100);
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	2364      	movs	r3, #100	; 0x64
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <u1_printf+0x48>)
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <u1_printf+0x4c>)
 8001aea:	f001 fe6a 	bl	80037c2 <HAL_UART_Transmit>

	memset(USART1_TxBUF, 0, USART1_MAX_SENDLEN);
 8001aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af2:	2100      	movs	r1, #0
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <u1_printf+0x48>)
 8001af6:	f002 fc93 	bl	8004420 <memset>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b04:	b004      	add	sp, #16
 8001b06:	4770      	bx	lr
 8001b08:	200004e8 	.word	0x200004e8
 8001b0c:	200010ec 	.word	0x200010ec

08001b10 <u2_transmit>:

void u2_transmit(char *fmt, ...) {
 8001b10:	b40f      	push	{r0, r1, r2, r3}
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	603b      	str	r3, [r7, #0]
	vsprintf((char*) USART2_TxBUF, fmt, ap);
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	6939      	ldr	r1, [r7, #16]
 8001b22:	4822      	ldr	r0, [pc, #136]	; (8001bac <u2_transmit+0x9c>)
 8001b24:	f002 fdbc 	bl	80046a0 <vsiprintf>
	va_end(ap);

	for (i = 0; i < USART2_MAX_SENDLEN; i++) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	e019      	b.n	8001b62 <u2_transmit+0x52>
		j = i + 1;
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	3301      	adds	r3, #1
 8001b32:	80bb      	strh	r3, [r7, #4]
		if (USART2_TxBUF[i] == '\00') {
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <u2_transmit+0x9c>)
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10e      	bne.n	8001b5c <u2_transmit+0x4c>
			for (; j < USART2_MAX_SENDLEN; j++) {
 8001b3e:	e009      	b.n	8001b54 <u2_transmit+0x44>
				USART2_TxBUF[j - 1] = USART2_TxBUF[j];
 8001b40:	88ba      	ldrh	r2, [r7, #4]
 8001b42:	88bb      	ldrh	r3, [r7, #4]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	4919      	ldr	r1, [pc, #100]	; (8001bac <u2_transmit+0x9c>)
 8001b48:	5c89      	ldrb	r1, [r1, r2]
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <u2_transmit+0x9c>)
 8001b4c:	54d1      	strb	r1, [r2, r3]
			for (; j < USART2_MAX_SENDLEN; j++) {
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	3301      	adds	r3, #1
 8001b52:	80bb      	strh	r3, [r7, #4]
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5a:	d3f1      	bcc.n	8001b40 <u2_transmit+0x30>
	for (i = 0; i < USART2_MAX_SENDLEN; i++) {
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	80fb      	strh	r3, [r7, #6]
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b68:	d3e1      	bcc.n	8001b2e <u2_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) USART2_TxBUF);
 8001b6a:	4810      	ldr	r0, [pc, #64]	; (8001bac <u2_transmit+0x9c>)
 8001b6c:	f7fe faee 	bl	800014c <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&huart2, USART2_TxBUF, i, 100);
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	2364      	movs	r3, #100	; 0x64
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <u2_transmit+0x9c>)
 8001b7a:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <u2_transmit+0xa0>)
 8001b7c:	f001 fe21 	bl	80037c2 <HAL_UART_Transmit>

	memset(USART2_TxBUF, 0, USART2_MAX_SENDLEN);
 8001b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b84:	2100      	movs	r1, #0
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <u2_transmit+0x9c>)
 8001b88:	f002 fc4a 	bl	8004420 <memset>
	memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 8001b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b90:	2100      	movs	r1, #0
 8001b92:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <u2_transmit+0xa4>)
 8001b94:	f002 fc44 	bl	8004420 <memset>
	USART2_RecvEndFlag = 0;
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <u2_transmit+0xa8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ba8:	b004      	add	sp, #16
 8001baa:	4770      	bx	lr
 8001bac:	200008e8 	.word	0x200008e8
 8001bb0:	20001130 	.word	0x20001130
 8001bb4:	20000ce8 	.word	0x20000ce8
 8001bb8:	200010e9 	.word	0x200010e9

08001bbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	; (8001c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001be2:	f7ff fdc9 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f002 fbe1 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bea:	f7ff fb99 	bl	8001320 <main>
  bx lr
 8001bee:	4770      	bx	lr
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001bf8:	080059d8 	.word	0x080059d8
  ldr r2, =_sbss
 8001bfc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001c00:	200011cc 	.word	0x200011cc

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>
	...

08001c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_Init+0x28>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_Init+0x28>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 f947 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f000 f808 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fcf0 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f95f 	bl	8001f16 <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f000 f927 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000010 	.word	0x20000010
 8001c90:	2000000c 	.word	0x2000000c

08001c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_IncTick+0x1c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x20>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <HAL_IncTick+0x20>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000010 	.word	0x20000010
 8001cb4:	200011b8 	.word	0x200011b8

08001cb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <HAL_GetTick+0x10>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	200011b8 	.word	0x200011b8

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff fff0 	bl	8001cb8 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffe0 	bl	8001cb8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000010 	.word	0x20000010

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d46:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db0b      	blt.n	8001da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4906      	ldr	r1, [pc, #24]	; (8001dac <__NVIC_EnableIRQ+0x34>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff90 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff2d 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff42 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff90 	bl	8001e04 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5f 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff35 	bl	8001d78 <__NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffa2 	bl	8001e68 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e043      	b.n	8001fce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_DMA_Init+0xa8>)
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_DMA_Init+0xac>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	009a      	lsls	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <HAL_DMA_Init+0xb0>)
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	bffdfff8 	.word	0xbffdfff8
 8001fdc:	cccccccd 	.word	0xcccccccd
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_DMA_Start_IT+0x20>
 8002000:	2302      	movs	r3, #2
 8002002:	e04a      	b.n	800209a <HAL_DMA_Start_IT+0xb6>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002012:	2b01      	cmp	r3, #1
 8002014:	d13a      	bne.n	800208c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f9e8 	bl	8002410 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 020e 	orr.w	r2, r2, #14
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e00f      	b.n	800207a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0204 	bic.w	r2, r2, #4
 8002068:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 020a 	orr.w	r2, r2, #10
 8002078:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e005      	b.n	8002098 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002094:	2302      	movs	r3, #2
 8002096:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002098:	7dfb      	ldrb	r3, [r7, #23]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d008      	beq.n	80020ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2204      	movs	r2, #4
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e020      	b.n	800210c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 020e 	bic.w	r2, r2, #14
 80020d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
	...

08002118 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212a:	2b02      	cmp	r3, #2
 800212c:	d005      	beq.n	800213a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2204      	movs	r2, #4
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e051      	b.n	80021de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 020e 	bic.w	r2, r2, #14
 8002148:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_DMA_Abort_IT+0xd0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d029      	beq.n	80021b8 <HAL_DMA_Abort_IT+0xa0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <HAL_DMA_Abort_IT+0xd4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d022      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x9c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_DMA_Abort_IT+0xd8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01a      	beq.n	80021ae <HAL_DMA_Abort_IT+0x96>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_DMA_Abort_IT+0xdc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d012      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x90>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_DMA_Abort_IT+0xe0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00a      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x8a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <HAL_DMA_Abort_IT+0xe4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d102      	bne.n	800219c <HAL_DMA_Abort_IT+0x84>
 8002196:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800219a:	e00e      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 800219c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a0:	e00b      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a6:	e008      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ac:	e005      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b2:	e002      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021b4:	2310      	movs	r3, #16
 80021b6:	e000      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021b8:	2301      	movs	r3, #1
 80021ba:	4a11      	ldr	r2, [pc, #68]	; (8002200 <HAL_DMA_Abort_IT+0xe8>)
 80021bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	4798      	blx	r3
    } 
  }
  return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020008 	.word	0x40020008
 80021ec:	4002001c 	.word	0x4002001c
 80021f0:	40020030 	.word	0x40020030
 80021f4:	40020044 	.word	0x40020044
 80021f8:	40020058 	.word	0x40020058
 80021fc:	4002006c 	.word	0x4002006c
 8002200:	40020000 	.word	0x40020000

08002204 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	2204      	movs	r2, #4
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d04f      	beq.n	80022cc <HAL_DMA_IRQHandler+0xc8>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d04a      	beq.n	80022cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d107      	bne.n	8002254 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a66      	ldr	r2, [pc, #408]	; (80023f4 <HAL_DMA_IRQHandler+0x1f0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d029      	beq.n	80022b2 <HAL_DMA_IRQHandler+0xae>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <HAL_DMA_IRQHandler+0x1f4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d022      	beq.n	80022ae <HAL_DMA_IRQHandler+0xaa>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a63      	ldr	r2, [pc, #396]	; (80023fc <HAL_DMA_IRQHandler+0x1f8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01a      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xa4>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a62      	ldr	r2, [pc, #392]	; (8002400 <HAL_DMA_IRQHandler+0x1fc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d012      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x9e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a60      	ldr	r2, [pc, #384]	; (8002404 <HAL_DMA_IRQHandler+0x200>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00a      	beq.n	800229c <HAL_DMA_IRQHandler+0x98>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a5f      	ldr	r2, [pc, #380]	; (8002408 <HAL_DMA_IRQHandler+0x204>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d102      	bne.n	8002296 <HAL_DMA_IRQHandler+0x92>
 8002290:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002294:	e00e      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 8002296:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800229a:	e00b      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 800229c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022a0:	e008      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 80022a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022a6:	e005      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 80022a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ac:	e002      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 80022ae:	2340      	movs	r3, #64	; 0x40
 80022b0:	e000      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 80022b2:	2304      	movs	r3, #4
 80022b4:	4a55      	ldr	r2, [pc, #340]	; (800240c <HAL_DMA_IRQHandler+0x208>)
 80022b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8094 	beq.w	80023ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022ca:	e08e      	b.n	80023ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	2202      	movs	r2, #2
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d056      	beq.n	800238a <HAL_DMA_IRQHandler+0x186>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d051      	beq.n	800238a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 020a 	bic.w	r2, r2, #10
 8002302:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a38      	ldr	r2, [pc, #224]	; (80023f4 <HAL_DMA_IRQHandler+0x1f0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d029      	beq.n	800236a <HAL_DMA_IRQHandler+0x166>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a37      	ldr	r2, [pc, #220]	; (80023f8 <HAL_DMA_IRQHandler+0x1f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d022      	beq.n	8002366 <HAL_DMA_IRQHandler+0x162>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a35      	ldr	r2, [pc, #212]	; (80023fc <HAL_DMA_IRQHandler+0x1f8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01a      	beq.n	8002360 <HAL_DMA_IRQHandler+0x15c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a34      	ldr	r2, [pc, #208]	; (8002400 <HAL_DMA_IRQHandler+0x1fc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d012      	beq.n	800235a <HAL_DMA_IRQHandler+0x156>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a32      	ldr	r2, [pc, #200]	; (8002404 <HAL_DMA_IRQHandler+0x200>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00a      	beq.n	8002354 <HAL_DMA_IRQHandler+0x150>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a31      	ldr	r2, [pc, #196]	; (8002408 <HAL_DMA_IRQHandler+0x204>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d102      	bne.n	800234e <HAL_DMA_IRQHandler+0x14a>
 8002348:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800234c:	e00e      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 800234e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002352:	e00b      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 8002354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002358:	e008      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 800235a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235e:	e005      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 8002360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002364:	e002      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 8002366:	2320      	movs	r3, #32
 8002368:	e000      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 800236a:	2302      	movs	r3, #2
 800236c:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_DMA_IRQHandler+0x208>)
 800236e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d034      	beq.n	80023ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002388:	e02f      	b.n	80023ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2208      	movs	r2, #8
 8002390:	409a      	lsls	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d028      	beq.n	80023ec <HAL_DMA_IRQHandler+0x1e8>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d023      	beq.n	80023ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 020e 	bic.w	r2, r2, #14
 80023b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f202 	lsl.w	r2, r1, r2
 80023c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
    }
  }
  return;
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
}
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40020008 	.word	0x40020008
 80023f8:	4002001c 	.word	0x4002001c
 80023fc:	40020030 	.word	0x40020030
 8002400:	40020044 	.word	0x40020044
 8002404:	40020058 	.word	0x40020058
 8002408:	4002006c 	.word	0x4002006c
 800240c:	40020000 	.word	0x40020000

08002410 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b10      	cmp	r3, #16
 800243c:	d108      	bne.n	8002450 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800244e:	e007      	b.n	8002460 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
	...

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b08b      	sub	sp, #44	; 0x2c
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247e:	e169      	b.n	8002754 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002480:	2201      	movs	r2, #1
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 8158 	bne.w	800274e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4a9a      	ldr	r2, [pc, #616]	; (800270c <HAL_GPIO_Init+0x2a0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d05e      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024a8:	4a98      	ldr	r2, [pc, #608]	; (800270c <HAL_GPIO_Init+0x2a0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d875      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024ae:	4a98      	ldr	r2, [pc, #608]	; (8002710 <HAL_GPIO_Init+0x2a4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d058      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024b4:	4a96      	ldr	r2, [pc, #600]	; (8002710 <HAL_GPIO_Init+0x2a4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d86f      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024ba:	4a96      	ldr	r2, [pc, #600]	; (8002714 <HAL_GPIO_Init+0x2a8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d052      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024c0:	4a94      	ldr	r2, [pc, #592]	; (8002714 <HAL_GPIO_Init+0x2a8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d869      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024c6:	4a94      	ldr	r2, [pc, #592]	; (8002718 <HAL_GPIO_Init+0x2ac>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d04c      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024cc:	4a92      	ldr	r2, [pc, #584]	; (8002718 <HAL_GPIO_Init+0x2ac>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d863      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024d2:	4a92      	ldr	r2, [pc, #584]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d046      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
 80024d8:	4a90      	ldr	r2, [pc, #576]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d85d      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024de:	2b12      	cmp	r3, #18
 80024e0:	d82a      	bhi.n	8002538 <HAL_GPIO_Init+0xcc>
 80024e2:	2b12      	cmp	r3, #18
 80024e4:	d859      	bhi.n	800259a <HAL_GPIO_Init+0x12e>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <HAL_GPIO_Init+0x80>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	08002567 	.word	0x08002567
 80024f0:	08002541 	.word	0x08002541
 80024f4:	08002553 	.word	0x08002553
 80024f8:	08002595 	.word	0x08002595
 80024fc:	0800259b 	.word	0x0800259b
 8002500:	0800259b 	.word	0x0800259b
 8002504:	0800259b 	.word	0x0800259b
 8002508:	0800259b 	.word	0x0800259b
 800250c:	0800259b 	.word	0x0800259b
 8002510:	0800259b 	.word	0x0800259b
 8002514:	0800259b 	.word	0x0800259b
 8002518:	0800259b 	.word	0x0800259b
 800251c:	0800259b 	.word	0x0800259b
 8002520:	0800259b 	.word	0x0800259b
 8002524:	0800259b 	.word	0x0800259b
 8002528:	0800259b 	.word	0x0800259b
 800252c:	0800259b 	.word	0x0800259b
 8002530:	08002549 	.word	0x08002549
 8002534:	0800255d 	.word	0x0800255d
 8002538:	4a79      	ldr	r2, [pc, #484]	; (8002720 <HAL_GPIO_Init+0x2b4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800253e:	e02c      	b.n	800259a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	623b      	str	r3, [r7, #32]
          break;
 8002546:	e029      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	3304      	adds	r3, #4
 800254e:	623b      	str	r3, [r7, #32]
          break;
 8002550:	e024      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	3308      	adds	r3, #8
 8002558:	623b      	str	r3, [r7, #32]
          break;
 800255a:	e01f      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	330c      	adds	r3, #12
 8002562:	623b      	str	r3, [r7, #32]
          break;
 8002564:	e01a      	b.n	800259c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800256e:	2304      	movs	r3, #4
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e013      	b.n	800259c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800257c:	2308      	movs	r3, #8
 800257e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	611a      	str	r2, [r3, #16]
          break;
 8002586:	e009      	b.n	800259c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002588:	2308      	movs	r3, #8
 800258a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	615a      	str	r2, [r3, #20]
          break;
 8002592:	e003      	b.n	800259c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
          break;
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x130>
          break;
 800259a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	d801      	bhi.n	80025a6 <HAL_GPIO_Init+0x13a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	e001      	b.n	80025aa <HAL_GPIO_Init+0x13e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2bff      	cmp	r3, #255	; 0xff
 80025b0:	d802      	bhi.n	80025b8 <HAL_GPIO_Init+0x14c>
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0x152>
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	3b08      	subs	r3, #8
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	210f      	movs	r1, #15
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	6a39      	ldr	r1, [r7, #32]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	431a      	orrs	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80b1 	beq.w	800274e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025ec:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_GPIO_Init+0x2b8>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_GPIO_Init+0x2b8>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <HAL_GPIO_Init+0x2b8>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002604:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_GPIO_Init+0x2bc>)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a40      	ldr	r2, [pc, #256]	; (800272c <HAL_GPIO_Init+0x2c0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <HAL_GPIO_Init+0x1ec>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3f      	ldr	r2, [pc, #252]	; (8002730 <HAL_GPIO_Init+0x2c4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00d      	beq.n	8002654 <HAL_GPIO_Init+0x1e8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3e      	ldr	r2, [pc, #248]	; (8002734 <HAL_GPIO_Init+0x2c8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <HAL_GPIO_Init+0x1e4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a3d      	ldr	r2, [pc, #244]	; (8002738 <HAL_GPIO_Init+0x2cc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d101      	bne.n	800264c <HAL_GPIO_Init+0x1e0>
 8002648:	2303      	movs	r3, #3
 800264a:	e006      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 800264c:	2304      	movs	r3, #4
 800264e:	e004      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 8002650:	2302      	movs	r3, #2
 8002652:	e002      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_GPIO_Init+0x1ee>
 8002658:	2300      	movs	r3, #0
 800265a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265c:	f002 0203 	and.w	r2, r2, #3
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	4093      	lsls	r3, r2
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800266a:	492f      	ldr	r1, [pc, #188]	; (8002728 <HAL_GPIO_Init+0x2bc>)
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	492c      	ldr	r1, [pc, #176]	; (800273c <HAL_GPIO_Init+0x2d0>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	43db      	mvns	r3, r3
 800269a:	4928      	ldr	r1, [pc, #160]	; (800273c <HAL_GPIO_Init+0x2d0>)
 800269c:	4013      	ands	r3, r2
 800269e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4922      	ldr	r1, [pc, #136]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	491e      	ldr	r1, [pc, #120]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	4918      	ldr	r1, [pc, #96]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	4914      	ldr	r1, [pc, #80]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d021      	beq.n	8002740 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_GPIO_Init+0x2d0>)
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	60cb      	str	r3, [r1, #12]
 8002708:	e021      	b.n	800274e <HAL_GPIO_Init+0x2e2>
 800270a:	bf00      	nop
 800270c:	10320000 	.word	0x10320000
 8002710:	10310000 	.word	0x10310000
 8002714:	10220000 	.word	0x10220000
 8002718:	10210000 	.word	0x10210000
 800271c:	10120000 	.word	0x10120000
 8002720:	10110000 	.word	0x10110000
 8002724:	40021000 	.word	0x40021000
 8002728:	40010000 	.word	0x40010000
 800272c:	40010800 	.word	0x40010800
 8002730:	40010c00 	.word	0x40010c00
 8002734:	40011000 	.word	0x40011000
 8002738:	40011400 	.word	0x40011400
 800273c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	43db      	mvns	r3, r3
 8002748:	4909      	ldr	r1, [pc, #36]	; (8002770 <HAL_GPIO_Init+0x304>)
 800274a:	4013      	ands	r3, r2
 800274c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	3301      	adds	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	f47f ae8e 	bne.w	8002480 <HAL_GPIO_Init+0x14>
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	372c      	adds	r7, #44	; 0x2c
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	611a      	str	r2, [r3, #16]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e272      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8087 	beq.w	80028d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c4:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d00c      	beq.n	80027ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027d0:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d112      	bne.n	8002802 <HAL_RCC_OscConfig+0x5e>
 80027dc:	4b8c      	ldr	r3, [pc, #560]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e8:	d10b      	bne.n	8002802 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ea:	4b89      	ldr	r3, [pc, #548]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d06c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x12c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d168      	bne.n	80028d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e24c      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x76>
 800280c:	4b80      	ldr	r3, [pc, #512]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a7f      	ldr	r2, [pc, #508]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	e02e      	b.n	8002878 <HAL_RCC_OscConfig+0xd4>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x98>
 8002822:	4b7b      	ldr	r3, [pc, #492]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7a      	ldr	r2, [pc, #488]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b78      	ldr	r3, [pc, #480]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a77      	ldr	r2, [pc, #476]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e01d      	b.n	8002878 <HAL_RCC_OscConfig+0xd4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0xbc>
 8002846:	4b72      	ldr	r3, [pc, #456]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a71      	ldr	r2, [pc, #452]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 800284c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a6e      	ldr	r2, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0xd4>
 8002860:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a6a      	ldr	r2, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a67      	ldr	r2, [pc, #412]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002876:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7ff fa1a 	bl	8001cb8 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002888:	f7ff fa16 	bl	8001cb8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e200      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b5d      	ldr	r3, [pc, #372]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0xe4>
 80028a6:	e014      	b.n	80028d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff fa06 	bl	8001cb8 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff fa02 	bl	8001cb8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1ec      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x10c>
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d063      	beq.n	80029a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028de:	4b4c      	ldr	r3, [pc, #304]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ea:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d11c      	bne.n	8002930 <HAL_RCC_OscConfig+0x18c>
 80028f6:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d116      	bne.n	8002930 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_RCC_OscConfig+0x176>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e1c0      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4939      	ldr	r1, [pc, #228]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	e03a      	b.n	80029a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002938:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7ff f9bb 	bl	8001cb8 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002946:	f7ff f9b7 	bl	8001cb8 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1a1      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4927      	ldr	r1, [pc, #156]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
 8002978:	e015      	b.n	80029a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff f99a 	bl	8001cb8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002988:	f7ff f996 	bl	8001cb8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e180      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d03a      	beq.n	8002a28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d019      	beq.n	80029ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <HAL_RCC_OscConfig+0x274>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c0:	f7ff f97a 	bl	8001cb8 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7ff f976 	bl	8001cb8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e160      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029e6:	2001      	movs	r0, #1
 80029e8:	f000 fad8 	bl	8002f9c <RCC_Delay>
 80029ec:	e01c      	b.n	8002a28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_RCC_OscConfig+0x274>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f4:	f7ff f960 	bl	8001cb8 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fa:	e00f      	b.n	8002a1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7ff f95c 	bl	8001cb8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d908      	bls.n	8002a1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e146      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	42420000 	.word	0x42420000
 8002a18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b92      	ldr	r3, [pc, #584]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e9      	bne.n	80029fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80a6 	beq.w	8002b82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b8b      	ldr	r3, [pc, #556]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	4b88      	ldr	r3, [pc, #544]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4a87      	ldr	r2, [pc, #540]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	61d3      	str	r3, [r2, #28]
 8002a52:	4b85      	ldr	r3, [pc, #532]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a62:	4b82      	ldr	r3, [pc, #520]	; (8002c6c <HAL_RCC_OscConfig+0x4c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d118      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6e:	4b7f      	ldr	r3, [pc, #508]	; (8002c6c <HAL_RCC_OscConfig+0x4c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7e      	ldr	r2, [pc, #504]	; (8002c6c <HAL_RCC_OscConfig+0x4c8>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7a:	f7ff f91d 	bl	8001cb8 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a82:	f7ff f919 	bl	8001cb8 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b64      	cmp	r3, #100	; 0x64
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e103      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	4b75      	ldr	r3, [pc, #468]	; (8002c6c <HAL_RCC_OscConfig+0x4c8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x312>
 8002aa8:	4b6f      	ldr	r3, [pc, #444]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4a6e      	ldr	r2, [pc, #440]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6213      	str	r3, [r2, #32]
 8002ab4:	e02d      	b.n	8002b12 <HAL_RCC_OscConfig+0x36e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x334>
 8002abe:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a69      	ldr	r2, [pc, #420]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	4b67      	ldr	r3, [pc, #412]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a66      	ldr	r2, [pc, #408]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	6213      	str	r3, [r2, #32]
 8002ad6:	e01c      	b.n	8002b12 <HAL_RCC_OscConfig+0x36e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d10c      	bne.n	8002afa <HAL_RCC_OscConfig+0x356>
 8002ae0:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a60      	ldr	r2, [pc, #384]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	4b5e      	ldr	r3, [pc, #376]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a5d      	ldr	r2, [pc, #372]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	e00b      	b.n	8002b12 <HAL_RCC_OscConfig+0x36e>
 8002afa:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a5a      	ldr	r2, [pc, #360]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6213      	str	r3, [r2, #32]
 8002b06:	4b58      	ldr	r3, [pc, #352]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a57      	ldr	r2, [pc, #348]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d015      	beq.n	8002b46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7ff f8cd 	bl	8001cb8 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7ff f8c9 	bl	8001cb8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e0b1      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0ee      	beq.n	8002b22 <HAL_RCC_OscConfig+0x37e>
 8002b44:	e014      	b.n	8002b70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b46:	f7ff f8b7 	bl	8001cb8 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7ff f8b3 	bl	8001cb8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e09b      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b64:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ee      	bne.n	8002b4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d105      	bne.n	8002b82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b76:	4b3c      	ldr	r3, [pc, #240]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	4a3b      	ldr	r2, [pc, #236]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8087 	beq.w	8002c9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d061      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d146      	bne.n	8002c2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7ff f887 	bl	8001cb8 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bae:	f7ff f883 	bl	8001cb8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e06d      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d108      	bne.n	8002be8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4921      	ldr	r1, [pc, #132]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be8:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a19      	ldr	r1, [r3, #32]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	491b      	ldr	r1, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7ff f857 	bl	8001cb8 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7ff f853 	bl	8001cb8 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e03d      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x46a>
 8002c2c:	e035      	b.n	8002c9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_RCC_OscConfig+0x4cc>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff f840 	bl	8001cb8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7ff f83c 	bl	8001cb8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e026      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x498>
 8002c5a:	e01e      	b.n	8002c9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e019      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_OscConfig+0x500>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0d0      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d910      	bls.n	8002cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b67      	ldr	r3, [pc, #412]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 0207 	bic.w	r2, r3, #7
 8002cd2:	4965      	ldr	r1, [pc, #404]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b8      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4a52      	ldr	r2, [pc, #328]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	494d      	ldr	r1, [pc, #308]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d040      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d115      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e07f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e073      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06b      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4936      	ldr	r1, [pc, #216]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fe ff8e 	bl	8001cb8 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe ff8a 	bl	8001cb8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e053      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d210      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4922      	ldr	r1, [pc, #136]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e032      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4916      	ldr	r1, [pc, #88]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e36:	f000 f821 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	490a      	ldr	r1, [pc, #40]	; (8002e70 <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	5ccb      	ldrb	r3, [r1, r3]
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <HAL_RCC_ClockConfig+0x1cc>)
 8002e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_ClockConfig+0x1d0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe feec 	bl	8001c34 <HAL_InitTick>

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40022000 	.word	0x40022000
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	08005984 	.word	0x08005984
 8002e74:	20000008 	.word	0x20000008
 8002e78:	2000000c 	.word	0x2000000c

08002e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e7c:	b490      	push	{r4, r7}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xac>)
 8002e84:	1d3c      	adds	r4, r7, #4
 8002e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e8c:	f240 2301 	movw	r3, #513	; 0x201
 8002e90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ea6:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d002      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x40>
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x46>
 8002eba:	e02b      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ebe:	623b      	str	r3, [r7, #32]
      break;
 8002ec0:	e02b      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	0c9b      	lsrs	r3, r3, #18
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3328      	adds	r3, #40	; 0x28
 8002ecc:	443b      	add	r3, r7
 8002ece:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ed2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d012      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	0c5b      	lsrs	r3, r3, #17
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	3328      	adds	r3, #40	; 0x28
 8002eea:	443b      	add	r3, r7
 8002eec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ef0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ef6:	fb03 f202 	mul.w	r2, r3, r2
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
 8002f02:	e004      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	623b      	str	r3, [r7, #32]
      break;
 8002f12:	e002      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f16:	623b      	str	r3, [r7, #32]
      break;
 8002f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3728      	adds	r7, #40	; 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc90      	pop	{r4, r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	08005974 	.word	0x08005974
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	007a1200 	.word	0x007a1200
 8002f34:	003d0900 	.word	0x003d0900

08002f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f3c:	4b02      	ldr	r3, [pc, #8]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	20000008 	.word	0x20000008

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f50:	f7ff fff2 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4903      	ldr	r1, [pc, #12]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08005994 	.word	0x08005994

08002f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f78:	f7ff ffde 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0adb      	lsrs	r3, r3, #11
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4903      	ldr	r1, [pc, #12]	; (8002f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08005994 	.word	0x08005994

08002f9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <RCC_Delay+0x34>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <RCC_Delay+0x38>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a5b      	lsrs	r3, r3, #9
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fb8:	bf00      	nop
  }
  while (Delay --);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e5a      	subs	r2, r3, #1
 8002fbe:	60fa      	str	r2, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f9      	bne.n	8002fb8 <RCC_Delay+0x1c>
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	20000008 	.word	0x20000008
 8002fd4:	10624dd3 	.word	0x10624dd3

08002fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e041      	b.n	800306e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe fc0e 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 fa1e 	bl	8003458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d122      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b02      	cmp	r3, #2
 8003098:	d11b      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f06f 0202 	mvn.w	r2, #2
 80030a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f9b1 	bl	8003420 <HAL_TIM_IC_CaptureCallback>
 80030be:	e005      	b.n	80030cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f9a4 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f9b3 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d122      	bne.n	8003126 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d11b      	bne.n	8003126 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f06f 0204 	mvn.w	r2, #4
 80030f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f987 	bl	8003420 <HAL_TIM_IC_CaptureCallback>
 8003112:	e005      	b.n	8003120 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f97a 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f989 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b08      	cmp	r3, #8
 8003132:	d122      	bne.n	800317a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b08      	cmp	r3, #8
 8003140:	d11b      	bne.n	800317a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f06f 0208 	mvn.w	r2, #8
 800314a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2204      	movs	r2, #4
 8003150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f95d 	bl	8003420 <HAL_TIM_IC_CaptureCallback>
 8003166:	e005      	b.n	8003174 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f950 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f95f 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d122      	bne.n	80031ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b10      	cmp	r3, #16
 8003194:	d11b      	bne.n	80031ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0210 	mvn.w	r2, #16
 800319e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2208      	movs	r2, #8
 80031a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f933 	bl	8003420 <HAL_TIM_IC_CaptureCallback>
 80031ba:	e005      	b.n	80031c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f926 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f935 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10e      	bne.n	80031fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d107      	bne.n	80031fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0201 	mvn.w	r2, #1
 80031f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fe fb37 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d10e      	bne.n	8003226 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b80      	cmp	r3, #128	; 0x80
 8003214:	d107      	bne.n	8003226 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800321e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fa78 	bl	8003716 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d10e      	bne.n	8003252 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d107      	bne.n	8003252 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800324a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8f9 	bl	8003444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b20      	cmp	r3, #32
 800325e:	d10e      	bne.n	800327e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b20      	cmp	r3, #32
 800326c:	d107      	bne.n	800327e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f06f 0220 	mvn.w	r2, #32
 8003276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fa43 	bl	8003704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_TIM_ConfigClockSource+0x18>
 800329a:	2302      	movs	r3, #2
 800329c:	e0b3      	b.n	8003406 <HAL_TIM_ConfigClockSource+0x180>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	d03e      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xd0>
 80032d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032dc:	f200 8087 	bhi.w	80033ee <HAL_TIM_ConfigClockSource+0x168>
 80032e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e4:	f000 8085 	beq.w	80033f2 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ec:	d87f      	bhi.n	80033ee <HAL_TIM_ConfigClockSource+0x168>
 80032ee:	2b70      	cmp	r3, #112	; 0x70
 80032f0:	d01a      	beq.n	8003328 <HAL_TIM_ConfigClockSource+0xa2>
 80032f2:	2b70      	cmp	r3, #112	; 0x70
 80032f4:	d87b      	bhi.n	80033ee <HAL_TIM_ConfigClockSource+0x168>
 80032f6:	2b60      	cmp	r3, #96	; 0x60
 80032f8:	d050      	beq.n	800339c <HAL_TIM_ConfigClockSource+0x116>
 80032fa:	2b60      	cmp	r3, #96	; 0x60
 80032fc:	d877      	bhi.n	80033ee <HAL_TIM_ConfigClockSource+0x168>
 80032fe:	2b50      	cmp	r3, #80	; 0x50
 8003300:	d03c      	beq.n	800337c <HAL_TIM_ConfigClockSource+0xf6>
 8003302:	2b50      	cmp	r3, #80	; 0x50
 8003304:	d873      	bhi.n	80033ee <HAL_TIM_ConfigClockSource+0x168>
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d058      	beq.n	80033bc <HAL_TIM_ConfigClockSource+0x136>
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d86f      	bhi.n	80033ee <HAL_TIM_ConfigClockSource+0x168>
 800330e:	2b30      	cmp	r3, #48	; 0x30
 8003310:	d064      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0x156>
 8003312:	2b30      	cmp	r3, #48	; 0x30
 8003314:	d86b      	bhi.n	80033ee <HAL_TIM_ConfigClockSource+0x168>
 8003316:	2b20      	cmp	r3, #32
 8003318:	d060      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0x156>
 800331a:	2b20      	cmp	r3, #32
 800331c:	d867      	bhi.n	80033ee <HAL_TIM_ConfigClockSource+0x168>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d05c      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0x156>
 8003322:	2b10      	cmp	r3, #16
 8003324:	d05a      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003326:	e062      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f000 f967 	bl	800360a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800334a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	609a      	str	r2, [r3, #8]
      break;
 8003354:	e04e      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 f950 	bl	800360a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003378:	609a      	str	r2, [r3, #8]
      break;
 800337a:	e03b      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	461a      	mov	r2, r3
 800338a:	f000 f8c7 	bl	800351c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2150      	movs	r1, #80	; 0x50
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f91e 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 800339a:	e02b      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	461a      	mov	r2, r3
 80033aa:	f000 f8e5 	bl	8003578 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2160      	movs	r1, #96	; 0x60
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f90e 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 80033ba:	e01b      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	461a      	mov	r2, r3
 80033ca:	f000 f8a7 	bl	800351c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2140      	movs	r1, #64	; 0x40
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f8fe 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 80033da:	e00b      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f000 f8f5 	bl	80035d6 <TIM_ITRx_SetConfig>
        break;
 80033ec:	e002      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
	...

08003458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a29      	ldr	r2, [pc, #164]	; (8003510 <TIM_Base_SetConfig+0xb8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x30>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x30>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a26      	ldr	r2, [pc, #152]	; (8003514 <TIM_Base_SetConfig+0xbc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x30>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a25      	ldr	r2, [pc, #148]	; (8003518 <TIM_Base_SetConfig+0xc0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <TIM_Base_SetConfig+0xb8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00b      	beq.n	80034ba <TIM_Base_SetConfig+0x62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d007      	beq.n	80034ba <TIM_Base_SetConfig+0x62>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a19      	ldr	r2, [pc, #100]	; (8003514 <TIM_Base_SetConfig+0xbc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_Base_SetConfig+0x62>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <TIM_Base_SetConfig+0xc0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a07      	ldr	r2, [pc, #28]	; (8003510 <TIM_Base_SetConfig+0xb8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d103      	bne.n	8003500 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	615a      	str	r2, [r3, #20]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800

0800351c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 030a 	bic.w	r3, r3, #10
 8003558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f023 0210 	bic.w	r2, r3, #16
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	031b      	lsls	r3, r3, #12
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	621a      	str	r2, [r3, #32]
}
 80035cc:	bf00      	nop
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f043 0307 	orr.w	r3, r3, #7
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800360a:	b480      	push	{r7}
 800360c:	b087      	sub	sp, #28
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003624:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	431a      	orrs	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4313      	orrs	r3, r2
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	609a      	str	r2, [r3, #8]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800365c:	2302      	movs	r3, #2
 800365e:	e046      	b.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ac:	d009      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a10      	ldr	r2, [pc, #64]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10c      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800

08003704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e03f      	b.n	80037ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe f8f8 	bl	8001944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800376a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fd89 	bl	8004284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b08a      	sub	sp, #40	; 0x28
 80037c6:	af02      	add	r7, sp, #8
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d17c      	bne.n	80038dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_UART_Transmit+0x2c>
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e075      	b.n	80038de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_UART_Transmit+0x3e>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e06e      	b.n	80038de <HAL_UART_Transmit+0x11c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2221      	movs	r2, #33	; 0x21
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003816:	f7fe fa4f 	bl	8001cb8 <HAL_GetTick>
 800381a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	88fa      	ldrh	r2, [r7, #6]
 8003826:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003830:	d108      	bne.n	8003844 <HAL_UART_Transmit+0x82>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	e003      	b.n	800384c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003848:	2300      	movs	r3, #0
 800384a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003854:	e02a      	b.n	80038ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fafa 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e036      	b.n	80038de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	3302      	adds	r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e007      	b.n	800389e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	3301      	adds	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1cf      	bne.n	8003856 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	2140      	movs	r1, #64	; 0x40
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 faca 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e006      	b.n	80038de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	4613      	mov	r3, r2
 80038f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d11d      	bne.n	800393c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_UART_Receive_DMA+0x26>
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e016      	b.n	800393e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_UART_Receive_DMA+0x38>
 800391a:	2302      	movs	r3, #2
 800391c:	e00f      	b.n	800393e <HAL_UART_Receive_DMA+0x58>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	461a      	mov	r2, r3
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fadc 	bl	8003ef0 <UART_Start_Receive_DMA>
 8003938:	4603      	mov	r3, r0
 800393a:	e000      	b.n	800393e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_UART_IRQHandler+0x52>
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fbcc 	bl	8004130 <UART_Receive_IT>
      return;
 8003998:	e17b      	b.n	8003c92 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80b1 	beq.w	8003b04 <HAL_UART_IRQHandler+0x1bc>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <HAL_UART_IRQHandler+0x70>
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80a6 	beq.w	8003b04 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_UART_IRQHandler+0x90>
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_UART_IRQHandler+0xb0>
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	f043 0202 	orr.w	r2, r3, #2
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_UART_IRQHandler+0xd0>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f043 0204 	orr.w	r2, r3, #4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00f      	beq.n	8003a42 <HAL_UART_IRQHandler+0xfa>
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <HAL_UART_IRQHandler+0xee>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f043 0208 	orr.w	r2, r3, #8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 811e 	beq.w	8003c88 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_UART_IRQHandler+0x11e>
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fb65 	bl	8004130 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <HAL_UART_IRQHandler+0x146>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d031      	beq.n	8003af2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 faa7 	bl	8003fe2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d023      	beq.n	8003aea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d013      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	4a76      	ldr	r2, [pc, #472]	; (8003c98 <HAL_UART_IRQHandler+0x350>)
 8003ac0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fb26 	bl	8002118 <HAL_DMA_Abort_IT>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003adc:	4610      	mov	r0, r2
 8003ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae0:	e00e      	b.n	8003b00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8f5 	bl	8003cd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae8:	e00a      	b.n	8003b00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8f1 	bl	8003cd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af0:	e006      	b.n	8003b00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8ed 	bl	8003cd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003afe:	e0c3      	b.n	8003c88 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	bf00      	nop
    return;
 8003b02:	e0c1      	b.n	8003c88 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	f040 80a1 	bne.w	8003c50 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 809b 	beq.w	8003c50 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8095 	beq.w	8003c50 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d04e      	beq.n	8003be8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b54:	8a3b      	ldrh	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8098 	beq.w	8003c8c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b60:	8a3a      	ldrh	r2, [r7, #16]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	f080 8092 	bcs.w	8003c8c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8a3a      	ldrh	r2, [r7, #16]
 8003b6c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d02b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b86:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0210 	bic.w	r2, r2, #16
 8003bc4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fa69 	bl	80020a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f87f 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003be6:	e051      	b.n	8003c8c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d047      	beq.n	8003c90 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c00:	8a7b      	ldrh	r3, [r7, #18]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d044      	beq.n	8003c90 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c14:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0210 	bic.w	r2, r2, #16
 8003c42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c44:	8a7b      	ldrh	r3, [r7, #18]
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f84b 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c4e:	e01f      	b.n	8003c90 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <HAL_UART_IRQHandler+0x324>
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f9fc 	bl	8004062 <UART_Transmit_IT>
    return;
 8003c6a:	e012      	b.n	8003c92 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <HAL_UART_IRQHandler+0x34a>
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fa3d 	bl	8004100 <UART_EndTransmit_IT>
    return;
 8003c86:	e004      	b.n	8003c92 <HAL_UART_IRQHandler+0x34a>
    return;
 8003c88:	bf00      	nop
 8003c8a:	e002      	b.n	8003c92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c8c:	bf00      	nop
 8003c8e:	e000      	b.n	8003c92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c90:	bf00      	nop
  }
}
 8003c92:	3728      	adds	r7, #40	; 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0800403b 	.word	0x0800403b

08003c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d12a      	bne.n	8003d6c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d2a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d107      	bne.n	8003d6c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0210 	bic.w	r2, r2, #16
 8003d6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d78:	4619      	mov	r1, r3
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7ff ffb2 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d80:	e002      	b.n	8003d88 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff ff93 	bl	8003cae <HAL_UART_RxCpltCallback>
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d108      	bne.n	8003db8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	4619      	mov	r1, r3
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff ff97 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003db6:	e002      	b.n	8003dbe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff ff81 	bl	8003cc0 <HAL_UART_RxHalfCpltCallback>
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bf14      	ite	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	2300      	moveq	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b21      	cmp	r3, #33	; 0x21
 8003df8:	d108      	bne.n	8003e0c <UART_DMAError+0x46>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2200      	movs	r2, #0
 8003e04:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e06:	68b8      	ldr	r0, [r7, #8]
 8003e08:	f000 f8d6 	bl	8003fb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	2300      	moveq	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b22      	cmp	r3, #34	; 0x22
 8003e2c:	d108      	bne.n	8003e40 <UART_DMAError+0x7a>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e3a:	68b8      	ldr	r0, [r7, #8]
 8003e3c:	f000 f8d1 	bl	8003fe2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f043 0210 	orr.w	r2, r3, #16
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4c:	68b8      	ldr	r0, [r7, #8]
 8003e4e:	f7ff ff40 	bl	8003cd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6a:	e02c      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d028      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7a:	f7fd ff1d 	bl	8001cb8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d21d      	bcs.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e00f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d0c3      	beq.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2222      	movs	r2, #34	; 0x22
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	4a23      	ldr	r2, [pc, #140]	; (8003fac <UART_Start_Receive_DMA+0xbc>)
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <UART_Start_Receive_DMA+0xc0>)
 8003f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	4a21      	ldr	r2, [pc, #132]	; (8003fb4 <UART_Start_Receive_DMA+0xc4>)
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	2200      	movs	r2, #0
 8003f36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f38:	f107 0308 	add.w	r3, r7, #8
 8003f3c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	f7fe f848 	bl	8001fe4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f80:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	08003cfb 	.word	0x08003cfb
 8003fb0:	08003d91 	.word	0x08003d91
 8003fb4:	08003dc7 	.word	0x08003dc7

08003fb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003fce:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ff8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	2b01      	cmp	r3, #1
 8004010:	d107      	bne.n	8004022 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0210 	bic.w	r2, r2, #16
 8004020:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff fe3c 	bl	8003cd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b21      	cmp	r3, #33	; 0x21
 8004074:	d13e      	bne.n	80040f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	d114      	bne.n	80040aa <UART_Transmit_IT+0x48>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d110      	bne.n	80040aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	621a      	str	r2, [r3, #32]
 80040a8:	e008      	b.n	80040bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6211      	str	r1, [r2, #32]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4619      	mov	r1, r3
 80040ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10f      	bne.n	80040f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004116:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff fdbb 	bl	8003c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b22      	cmp	r3, #34	; 0x22
 8004142:	f040 8099 	bne.w	8004278 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414e:	d117      	bne.n	8004180 <UART_Receive_IT+0x50>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d113      	bne.n	8004180 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	b29b      	uxth	r3, r3
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	b29a      	uxth	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	1c9a      	adds	r2, r3, #2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	629a      	str	r2, [r3, #40]	; 0x28
 800417e:	e026      	b.n	80041ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004192:	d007      	beq.n	80041a4 <UART_Receive_IT+0x74>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <UART_Receive_IT+0x82>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e008      	b.n	80041c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4619      	mov	r1, r3
 80041dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d148      	bne.n	8004274 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0220 	bic.w	r2, r2, #32
 80041f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004200:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	2b01      	cmp	r3, #1
 8004220:	d123      	bne.n	800426a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0210 	bic.w	r2, r2, #16
 8004236:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b10      	cmp	r3, #16
 8004244:	d10a      	bne.n	800425c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004260:	4619      	mov	r1, r3
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fd3e 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
 8004268:	e002      	b.n	8004270 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fd1f 	bl	8003cae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e002      	b.n	800427a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042be:	f023 030c 	bic.w	r3, r3, #12
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <UART_SetConfig+0x114>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d103      	bne.n	80042f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7fe fe42 	bl	8002f74 <HAL_RCC_GetPCLK2Freq>
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	e002      	b.n	80042fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f4:	f7fe fe2a 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80042f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009a      	lsls	r2, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	4a22      	ldr	r2, [pc, #136]	; (800439c <UART_SetConfig+0x118>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	0119      	lsls	r1, r3, #4
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	009a      	lsls	r2, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004330:	4b1a      	ldr	r3, [pc, #104]	; (800439c <UART_SetConfig+0x118>)
 8004332:	fba3 0302 	umull	r0, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2064      	movs	r0, #100	; 0x64
 800433a:	fb00 f303 	mul.w	r3, r0, r3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	3332      	adds	r3, #50	; 0x32
 8004344:	4a15      	ldr	r2, [pc, #84]	; (800439c <UART_SetConfig+0x118>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004350:	4419      	add	r1, r3
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009a      	lsls	r2, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	fbb2 f2f3 	udiv	r2, r2, r3
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <UART_SetConfig+0x118>)
 800436a:	fba3 0302 	umull	r0, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2064      	movs	r0, #100	; 0x64
 8004372:	fb00 f303 	mul.w	r3, r0, r3
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	3332      	adds	r3, #50	; 0x32
 800437c:	4a07      	ldr	r2, [pc, #28]	; (800439c <UART_SetConfig+0x118>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	f003 020f 	and.w	r2, r3, #15
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	440a      	add	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40013800 	.word	0x40013800
 800439c:	51eb851f 	.word	0x51eb851f

080043a0 <__errno>:
 80043a0:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <__errno+0x8>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000014 	.word	0x20000014

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	2600      	movs	r6, #0
 80043b0:	4d0c      	ldr	r5, [pc, #48]	; (80043e4 <__libc_init_array+0x38>)
 80043b2:	4c0d      	ldr	r4, [pc, #52]	; (80043e8 <__libc_init_array+0x3c>)
 80043b4:	1b64      	subs	r4, r4, r5
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	42a6      	cmp	r6, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	f000 fcda 	bl	8004d74 <_init>
 80043c0:	2600      	movs	r6, #0
 80043c2:	4d0a      	ldr	r5, [pc, #40]	; (80043ec <__libc_init_array+0x40>)
 80043c4:	4c0a      	ldr	r4, [pc, #40]	; (80043f0 <__libc_init_array+0x44>)
 80043c6:	1b64      	subs	r4, r4, r5
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	42a6      	cmp	r6, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d4:	4798      	blx	r3
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	f855 3b04 	ldr.w	r3, [r5], #4
 80043de:	4798      	blx	r3
 80043e0:	3601      	adds	r6, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	080059d0 	.word	0x080059d0
 80043e8:	080059d0 	.word	0x080059d0
 80043ec:	080059d0 	.word	0x080059d0
 80043f0:	080059d4 	.word	0x080059d4

080043f4 <malloc>:
 80043f4:	4b02      	ldr	r3, [pc, #8]	; (8004400 <malloc+0xc>)
 80043f6:	4601      	mov	r1, r0
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	f000 b881 	b.w	8004500 <_malloc_r>
 80043fe:	bf00      	nop
 8004400:	20000014 	.word	0x20000014

08004404 <memcpy>:
 8004404:	440a      	add	r2, r1
 8004406:	4291      	cmp	r1, r2
 8004408:	f100 33ff 	add.w	r3, r0, #4294967295
 800440c:	d100      	bne.n	8004410 <memcpy+0xc>
 800440e:	4770      	bx	lr
 8004410:	b510      	push	{r4, lr}
 8004412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004416:	4291      	cmp	r1, r2
 8004418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800441c:	d1f9      	bne.n	8004412 <memcpy+0xe>
 800441e:	bd10      	pop	{r4, pc}

08004420 <memset>:
 8004420:	4603      	mov	r3, r0
 8004422:	4402      	add	r2, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <_free_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4605      	mov	r5, r0
 8004434:	2900      	cmp	r1, #0
 8004436:	d040      	beq.n	80044ba <_free_r+0x8a>
 8004438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443c:	1f0c      	subs	r4, r1, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	bfb8      	it	lt
 8004442:	18e4      	addlt	r4, r4, r3
 8004444:	f000 f936 	bl	80046b4 <__malloc_lock>
 8004448:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <_free_r+0x8c>)
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	b933      	cbnz	r3, 800445c <_free_r+0x2c>
 800444e:	6063      	str	r3, [r4, #4]
 8004450:	6014      	str	r4, [r2, #0]
 8004452:	4628      	mov	r0, r5
 8004454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004458:	f000 b932 	b.w	80046c0 <__malloc_unlock>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d908      	bls.n	8004472 <_free_r+0x42>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	1821      	adds	r1, r4, r0
 8004464:	428b      	cmp	r3, r1
 8004466:	bf01      	itttt	eq
 8004468:	6819      	ldreq	r1, [r3, #0]
 800446a:	685b      	ldreq	r3, [r3, #4]
 800446c:	1809      	addeq	r1, r1, r0
 800446e:	6021      	streq	r1, [r4, #0]
 8004470:	e7ed      	b.n	800444e <_free_r+0x1e>
 8004472:	461a      	mov	r2, r3
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	b10b      	cbz	r3, 800447c <_free_r+0x4c>
 8004478:	42a3      	cmp	r3, r4
 800447a:	d9fa      	bls.n	8004472 <_free_r+0x42>
 800447c:	6811      	ldr	r1, [r2, #0]
 800447e:	1850      	adds	r0, r2, r1
 8004480:	42a0      	cmp	r0, r4
 8004482:	d10b      	bne.n	800449c <_free_r+0x6c>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	4401      	add	r1, r0
 8004488:	1850      	adds	r0, r2, r1
 800448a:	4283      	cmp	r3, r0
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	d1e0      	bne.n	8004452 <_free_r+0x22>
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4401      	add	r1, r0
 8004496:	6011      	str	r1, [r2, #0]
 8004498:	6053      	str	r3, [r2, #4]
 800449a:	e7da      	b.n	8004452 <_free_r+0x22>
 800449c:	d902      	bls.n	80044a4 <_free_r+0x74>
 800449e:	230c      	movs	r3, #12
 80044a0:	602b      	str	r3, [r5, #0]
 80044a2:	e7d6      	b.n	8004452 <_free_r+0x22>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	1821      	adds	r1, r4, r0
 80044a8:	428b      	cmp	r3, r1
 80044aa:	bf01      	itttt	eq
 80044ac:	6819      	ldreq	r1, [r3, #0]
 80044ae:	685b      	ldreq	r3, [r3, #4]
 80044b0:	1809      	addeq	r1, r1, r0
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	6063      	str	r3, [r4, #4]
 80044b6:	6054      	str	r4, [r2, #4]
 80044b8:	e7cb      	b.n	8004452 <_free_r+0x22>
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	200011bc 	.word	0x200011bc

080044c0 <sbrk_aligned>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4e0e      	ldr	r6, [pc, #56]	; (80044fc <sbrk_aligned+0x3c>)
 80044c4:	460c      	mov	r4, r1
 80044c6:	6831      	ldr	r1, [r6, #0]
 80044c8:	4605      	mov	r5, r0
 80044ca:	b911      	cbnz	r1, 80044d2 <sbrk_aligned+0x12>
 80044cc:	f000 f88c 	bl	80045e8 <_sbrk_r>
 80044d0:	6030      	str	r0, [r6, #0]
 80044d2:	4621      	mov	r1, r4
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 f887 	bl	80045e8 <_sbrk_r>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	d00a      	beq.n	80044f4 <sbrk_aligned+0x34>
 80044de:	1cc4      	adds	r4, r0, #3
 80044e0:	f024 0403 	bic.w	r4, r4, #3
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d007      	beq.n	80044f8 <sbrk_aligned+0x38>
 80044e8:	1a21      	subs	r1, r4, r0
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 f87c 	bl	80045e8 <_sbrk_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d101      	bne.n	80044f8 <sbrk_aligned+0x38>
 80044f4:	f04f 34ff 	mov.w	r4, #4294967295
 80044f8:	4620      	mov	r0, r4
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	200011c0 	.word	0x200011c0

08004500 <_malloc_r>:
 8004500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004504:	1ccd      	adds	r5, r1, #3
 8004506:	f025 0503 	bic.w	r5, r5, #3
 800450a:	3508      	adds	r5, #8
 800450c:	2d0c      	cmp	r5, #12
 800450e:	bf38      	it	cc
 8004510:	250c      	movcc	r5, #12
 8004512:	2d00      	cmp	r5, #0
 8004514:	4607      	mov	r7, r0
 8004516:	db01      	blt.n	800451c <_malloc_r+0x1c>
 8004518:	42a9      	cmp	r1, r5
 800451a:	d905      	bls.n	8004528 <_malloc_r+0x28>
 800451c:	230c      	movs	r3, #12
 800451e:	2600      	movs	r6, #0
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4630      	mov	r0, r6
 8004524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004528:	4e2e      	ldr	r6, [pc, #184]	; (80045e4 <_malloc_r+0xe4>)
 800452a:	f000 f8c3 	bl	80046b4 <__malloc_lock>
 800452e:	6833      	ldr	r3, [r6, #0]
 8004530:	461c      	mov	r4, r3
 8004532:	bb34      	cbnz	r4, 8004582 <_malloc_r+0x82>
 8004534:	4629      	mov	r1, r5
 8004536:	4638      	mov	r0, r7
 8004538:	f7ff ffc2 	bl	80044c0 <sbrk_aligned>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	4604      	mov	r4, r0
 8004540:	d14d      	bne.n	80045de <_malloc_r+0xde>
 8004542:	6834      	ldr	r4, [r6, #0]
 8004544:	4626      	mov	r6, r4
 8004546:	2e00      	cmp	r6, #0
 8004548:	d140      	bne.n	80045cc <_malloc_r+0xcc>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	4631      	mov	r1, r6
 800454e:	4638      	mov	r0, r7
 8004550:	eb04 0803 	add.w	r8, r4, r3
 8004554:	f000 f848 	bl	80045e8 <_sbrk_r>
 8004558:	4580      	cmp	r8, r0
 800455a:	d13a      	bne.n	80045d2 <_malloc_r+0xd2>
 800455c:	6821      	ldr	r1, [r4, #0]
 800455e:	3503      	adds	r5, #3
 8004560:	1a6d      	subs	r5, r5, r1
 8004562:	f025 0503 	bic.w	r5, r5, #3
 8004566:	3508      	adds	r5, #8
 8004568:	2d0c      	cmp	r5, #12
 800456a:	bf38      	it	cc
 800456c:	250c      	movcc	r5, #12
 800456e:	4638      	mov	r0, r7
 8004570:	4629      	mov	r1, r5
 8004572:	f7ff ffa5 	bl	80044c0 <sbrk_aligned>
 8004576:	3001      	adds	r0, #1
 8004578:	d02b      	beq.n	80045d2 <_malloc_r+0xd2>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	442b      	add	r3, r5
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	e00e      	b.n	80045a0 <_malloc_r+0xa0>
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	1b52      	subs	r2, r2, r5
 8004586:	d41e      	bmi.n	80045c6 <_malloc_r+0xc6>
 8004588:	2a0b      	cmp	r2, #11
 800458a:	d916      	bls.n	80045ba <_malloc_r+0xba>
 800458c:	1961      	adds	r1, r4, r5
 800458e:	42a3      	cmp	r3, r4
 8004590:	6025      	str	r5, [r4, #0]
 8004592:	bf18      	it	ne
 8004594:	6059      	strne	r1, [r3, #4]
 8004596:	6863      	ldr	r3, [r4, #4]
 8004598:	bf08      	it	eq
 800459a:	6031      	streq	r1, [r6, #0]
 800459c:	5162      	str	r2, [r4, r5]
 800459e:	604b      	str	r3, [r1, #4]
 80045a0:	4638      	mov	r0, r7
 80045a2:	f104 060b 	add.w	r6, r4, #11
 80045a6:	f000 f88b 	bl	80046c0 <__malloc_unlock>
 80045aa:	f026 0607 	bic.w	r6, r6, #7
 80045ae:	1d23      	adds	r3, r4, #4
 80045b0:	1af2      	subs	r2, r6, r3
 80045b2:	d0b6      	beq.n	8004522 <_malloc_r+0x22>
 80045b4:	1b9b      	subs	r3, r3, r6
 80045b6:	50a3      	str	r3, [r4, r2]
 80045b8:	e7b3      	b.n	8004522 <_malloc_r+0x22>
 80045ba:	6862      	ldr	r2, [r4, #4]
 80045bc:	42a3      	cmp	r3, r4
 80045be:	bf0c      	ite	eq
 80045c0:	6032      	streq	r2, [r6, #0]
 80045c2:	605a      	strne	r2, [r3, #4]
 80045c4:	e7ec      	b.n	80045a0 <_malloc_r+0xa0>
 80045c6:	4623      	mov	r3, r4
 80045c8:	6864      	ldr	r4, [r4, #4]
 80045ca:	e7b2      	b.n	8004532 <_malloc_r+0x32>
 80045cc:	4634      	mov	r4, r6
 80045ce:	6876      	ldr	r6, [r6, #4]
 80045d0:	e7b9      	b.n	8004546 <_malloc_r+0x46>
 80045d2:	230c      	movs	r3, #12
 80045d4:	4638      	mov	r0, r7
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	f000 f872 	bl	80046c0 <__malloc_unlock>
 80045dc:	e7a1      	b.n	8004522 <_malloc_r+0x22>
 80045de:	6025      	str	r5, [r4, #0]
 80045e0:	e7de      	b.n	80045a0 <_malloc_r+0xa0>
 80045e2:	bf00      	nop
 80045e4:	200011bc 	.word	0x200011bc

080045e8 <_sbrk_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	2300      	movs	r3, #0
 80045ec:	4d05      	ldr	r5, [pc, #20]	; (8004604 <_sbrk_r+0x1c>)
 80045ee:	4604      	mov	r4, r0
 80045f0:	4608      	mov	r0, r1
 80045f2:	602b      	str	r3, [r5, #0]
 80045f4:	f7fd f88a 	bl	800170c <_sbrk>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d102      	bne.n	8004602 <_sbrk_r+0x1a>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	b103      	cbz	r3, 8004602 <_sbrk_r+0x1a>
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	200011c4 	.word	0x200011c4

08004608 <siprintf>:
 8004608:	b40e      	push	{r1, r2, r3}
 800460a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800460e:	b500      	push	{lr}
 8004610:	b09c      	sub	sp, #112	; 0x70
 8004612:	ab1d      	add	r3, sp, #116	; 0x74
 8004614:	9002      	str	r0, [sp, #8]
 8004616:	9006      	str	r0, [sp, #24]
 8004618:	9107      	str	r1, [sp, #28]
 800461a:	9104      	str	r1, [sp, #16]
 800461c:	4808      	ldr	r0, [pc, #32]	; (8004640 <siprintf+0x38>)
 800461e:	4909      	ldr	r1, [pc, #36]	; (8004644 <siprintf+0x3c>)
 8004620:	f853 2b04 	ldr.w	r2, [r3], #4
 8004624:	9105      	str	r1, [sp, #20]
 8004626:	6800      	ldr	r0, [r0, #0]
 8004628:	a902      	add	r1, sp, #8
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	f000 f8aa 	bl	8004784 <_svfiprintf_r>
 8004630:	2200      	movs	r2, #0
 8004632:	9b02      	ldr	r3, [sp, #8]
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	b01c      	add	sp, #112	; 0x70
 8004638:	f85d eb04 	ldr.w	lr, [sp], #4
 800463c:	b003      	add	sp, #12
 800463e:	4770      	bx	lr
 8004640:	20000014 	.word	0x20000014
 8004644:	ffff0208 	.word	0xffff0208

08004648 <strstr>:
 8004648:	780a      	ldrb	r2, [r1, #0]
 800464a:	b570      	push	{r4, r5, r6, lr}
 800464c:	b96a      	cbnz	r2, 800466a <strstr+0x22>
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	429a      	cmp	r2, r3
 8004652:	d109      	bne.n	8004668 <strstr+0x20>
 8004654:	460c      	mov	r4, r1
 8004656:	4605      	mov	r5, r0
 8004658:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f6      	beq.n	800464e <strstr+0x6>
 8004660:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004664:	429e      	cmp	r6, r3
 8004666:	d0f7      	beq.n	8004658 <strstr+0x10>
 8004668:	3001      	adds	r0, #1
 800466a:	7803      	ldrb	r3, [r0, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ef      	bne.n	8004650 <strstr+0x8>
 8004670:	4618      	mov	r0, r3
 8004672:	e7ec      	b.n	800464e <strstr+0x6>

08004674 <_vsiprintf_r>:
 8004674:	b500      	push	{lr}
 8004676:	b09b      	sub	sp, #108	; 0x6c
 8004678:	9100      	str	r1, [sp, #0]
 800467a:	9104      	str	r1, [sp, #16]
 800467c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004680:	9105      	str	r1, [sp, #20]
 8004682:	9102      	str	r1, [sp, #8]
 8004684:	4905      	ldr	r1, [pc, #20]	; (800469c <_vsiprintf_r+0x28>)
 8004686:	9103      	str	r1, [sp, #12]
 8004688:	4669      	mov	r1, sp
 800468a:	f000 f87b 	bl	8004784 <_svfiprintf_r>
 800468e:	2200      	movs	r2, #0
 8004690:	9b00      	ldr	r3, [sp, #0]
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	b01b      	add	sp, #108	; 0x6c
 8004696:	f85d fb04 	ldr.w	pc, [sp], #4
 800469a:	bf00      	nop
 800469c:	ffff0208 	.word	0xffff0208

080046a0 <vsiprintf>:
 80046a0:	4613      	mov	r3, r2
 80046a2:	460a      	mov	r2, r1
 80046a4:	4601      	mov	r1, r0
 80046a6:	4802      	ldr	r0, [pc, #8]	; (80046b0 <vsiprintf+0x10>)
 80046a8:	6800      	ldr	r0, [r0, #0]
 80046aa:	f7ff bfe3 	b.w	8004674 <_vsiprintf_r>
 80046ae:	bf00      	nop
 80046b0:	20000014 	.word	0x20000014

080046b4 <__malloc_lock>:
 80046b4:	4801      	ldr	r0, [pc, #4]	; (80046bc <__malloc_lock+0x8>)
 80046b6:	f000 bafb 	b.w	8004cb0 <__retarget_lock_acquire_recursive>
 80046ba:	bf00      	nop
 80046bc:	200011c8 	.word	0x200011c8

080046c0 <__malloc_unlock>:
 80046c0:	4801      	ldr	r0, [pc, #4]	; (80046c8 <__malloc_unlock+0x8>)
 80046c2:	f000 baf6 	b.w	8004cb2 <__retarget_lock_release_recursive>
 80046c6:	bf00      	nop
 80046c8:	200011c8 	.word	0x200011c8

080046cc <__ssputs_r>:
 80046cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d0:	688e      	ldr	r6, [r1, #8]
 80046d2:	4682      	mov	sl, r0
 80046d4:	429e      	cmp	r6, r3
 80046d6:	460c      	mov	r4, r1
 80046d8:	4690      	mov	r8, r2
 80046da:	461f      	mov	r7, r3
 80046dc:	d838      	bhi.n	8004750 <__ssputs_r+0x84>
 80046de:	898a      	ldrh	r2, [r1, #12]
 80046e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046e4:	d032      	beq.n	800474c <__ssputs_r+0x80>
 80046e6:	6825      	ldr	r5, [r4, #0]
 80046e8:	6909      	ldr	r1, [r1, #16]
 80046ea:	3301      	adds	r3, #1
 80046ec:	eba5 0901 	sub.w	r9, r5, r1
 80046f0:	6965      	ldr	r5, [r4, #20]
 80046f2:	444b      	add	r3, r9
 80046f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046fc:	106d      	asrs	r5, r5, #1
 80046fe:	429d      	cmp	r5, r3
 8004700:	bf38      	it	cc
 8004702:	461d      	movcc	r5, r3
 8004704:	0553      	lsls	r3, r2, #21
 8004706:	d531      	bpl.n	800476c <__ssputs_r+0xa0>
 8004708:	4629      	mov	r1, r5
 800470a:	f7ff fef9 	bl	8004500 <_malloc_r>
 800470e:	4606      	mov	r6, r0
 8004710:	b950      	cbnz	r0, 8004728 <__ssputs_r+0x5c>
 8004712:	230c      	movs	r3, #12
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	f8ca 3000 	str.w	r3, [sl]
 800471c:	89a3      	ldrh	r3, [r4, #12]
 800471e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004722:	81a3      	strh	r3, [r4, #12]
 8004724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004728:	464a      	mov	r2, r9
 800472a:	6921      	ldr	r1, [r4, #16]
 800472c:	f7ff fe6a 	bl	8004404 <memcpy>
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473a:	81a3      	strh	r3, [r4, #12]
 800473c:	6126      	str	r6, [r4, #16]
 800473e:	444e      	add	r6, r9
 8004740:	6026      	str	r6, [r4, #0]
 8004742:	463e      	mov	r6, r7
 8004744:	6165      	str	r5, [r4, #20]
 8004746:	eba5 0509 	sub.w	r5, r5, r9
 800474a:	60a5      	str	r5, [r4, #8]
 800474c:	42be      	cmp	r6, r7
 800474e:	d900      	bls.n	8004752 <__ssputs_r+0x86>
 8004750:	463e      	mov	r6, r7
 8004752:	4632      	mov	r2, r6
 8004754:	4641      	mov	r1, r8
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	f000 faba 	bl	8004cd0 <memmove>
 800475c:	68a3      	ldr	r3, [r4, #8]
 800475e:	2000      	movs	r0, #0
 8004760:	1b9b      	subs	r3, r3, r6
 8004762:	60a3      	str	r3, [r4, #8]
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	4433      	add	r3, r6
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	e7db      	b.n	8004724 <__ssputs_r+0x58>
 800476c:	462a      	mov	r2, r5
 800476e:	f000 fac9 	bl	8004d04 <_realloc_r>
 8004772:	4606      	mov	r6, r0
 8004774:	2800      	cmp	r0, #0
 8004776:	d1e1      	bne.n	800473c <__ssputs_r+0x70>
 8004778:	4650      	mov	r0, sl
 800477a:	6921      	ldr	r1, [r4, #16]
 800477c:	f7ff fe58 	bl	8004430 <_free_r>
 8004780:	e7c7      	b.n	8004712 <__ssputs_r+0x46>
	...

08004784 <_svfiprintf_r>:
 8004784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004788:	4698      	mov	r8, r3
 800478a:	898b      	ldrh	r3, [r1, #12]
 800478c:	4607      	mov	r7, r0
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	460d      	mov	r5, r1
 8004792:	4614      	mov	r4, r2
 8004794:	b09d      	sub	sp, #116	; 0x74
 8004796:	d50e      	bpl.n	80047b6 <_svfiprintf_r+0x32>
 8004798:	690b      	ldr	r3, [r1, #16]
 800479a:	b963      	cbnz	r3, 80047b6 <_svfiprintf_r+0x32>
 800479c:	2140      	movs	r1, #64	; 0x40
 800479e:	f7ff feaf 	bl	8004500 <_malloc_r>
 80047a2:	6028      	str	r0, [r5, #0]
 80047a4:	6128      	str	r0, [r5, #16]
 80047a6:	b920      	cbnz	r0, 80047b2 <_svfiprintf_r+0x2e>
 80047a8:	230c      	movs	r3, #12
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	e0d1      	b.n	8004956 <_svfiprintf_r+0x1d2>
 80047b2:	2340      	movs	r3, #64	; 0x40
 80047b4:	616b      	str	r3, [r5, #20]
 80047b6:	2300      	movs	r3, #0
 80047b8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ba:	2320      	movs	r3, #32
 80047bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047c0:	2330      	movs	r3, #48	; 0x30
 80047c2:	f04f 0901 	mov.w	r9, #1
 80047c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004970 <_svfiprintf_r+0x1ec>
 80047ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047d2:	4623      	mov	r3, r4
 80047d4:	469a      	mov	sl, r3
 80047d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047da:	b10a      	cbz	r2, 80047e0 <_svfiprintf_r+0x5c>
 80047dc:	2a25      	cmp	r2, #37	; 0x25
 80047de:	d1f9      	bne.n	80047d4 <_svfiprintf_r+0x50>
 80047e0:	ebba 0b04 	subs.w	fp, sl, r4
 80047e4:	d00b      	beq.n	80047fe <_svfiprintf_r+0x7a>
 80047e6:	465b      	mov	r3, fp
 80047e8:	4622      	mov	r2, r4
 80047ea:	4629      	mov	r1, r5
 80047ec:	4638      	mov	r0, r7
 80047ee:	f7ff ff6d 	bl	80046cc <__ssputs_r>
 80047f2:	3001      	adds	r0, #1
 80047f4:	f000 80aa 	beq.w	800494c <_svfiprintf_r+0x1c8>
 80047f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047fa:	445a      	add	r2, fp
 80047fc:	9209      	str	r2, [sp, #36]	; 0x24
 80047fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80a2 	beq.w	800494c <_svfiprintf_r+0x1c8>
 8004808:	2300      	movs	r3, #0
 800480a:	f04f 32ff 	mov.w	r2, #4294967295
 800480e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004812:	f10a 0a01 	add.w	sl, sl, #1
 8004816:	9304      	str	r3, [sp, #16]
 8004818:	9307      	str	r3, [sp, #28]
 800481a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800481e:	931a      	str	r3, [sp, #104]	; 0x68
 8004820:	4654      	mov	r4, sl
 8004822:	2205      	movs	r2, #5
 8004824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004828:	4851      	ldr	r0, [pc, #324]	; (8004970 <_svfiprintf_r+0x1ec>)
 800482a:	f000 fa43 	bl	8004cb4 <memchr>
 800482e:	9a04      	ldr	r2, [sp, #16]
 8004830:	b9d8      	cbnz	r0, 800486a <_svfiprintf_r+0xe6>
 8004832:	06d0      	lsls	r0, r2, #27
 8004834:	bf44      	itt	mi
 8004836:	2320      	movmi	r3, #32
 8004838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800483c:	0711      	lsls	r1, r2, #28
 800483e:	bf44      	itt	mi
 8004840:	232b      	movmi	r3, #43	; 0x2b
 8004842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004846:	f89a 3000 	ldrb.w	r3, [sl]
 800484a:	2b2a      	cmp	r3, #42	; 0x2a
 800484c:	d015      	beq.n	800487a <_svfiprintf_r+0xf6>
 800484e:	4654      	mov	r4, sl
 8004850:	2000      	movs	r0, #0
 8004852:	f04f 0c0a 	mov.w	ip, #10
 8004856:	9a07      	ldr	r2, [sp, #28]
 8004858:	4621      	mov	r1, r4
 800485a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800485e:	3b30      	subs	r3, #48	; 0x30
 8004860:	2b09      	cmp	r3, #9
 8004862:	d94e      	bls.n	8004902 <_svfiprintf_r+0x17e>
 8004864:	b1b0      	cbz	r0, 8004894 <_svfiprintf_r+0x110>
 8004866:	9207      	str	r2, [sp, #28]
 8004868:	e014      	b.n	8004894 <_svfiprintf_r+0x110>
 800486a:	eba0 0308 	sub.w	r3, r0, r8
 800486e:	fa09 f303 	lsl.w	r3, r9, r3
 8004872:	4313      	orrs	r3, r2
 8004874:	46a2      	mov	sl, r4
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	e7d2      	b.n	8004820 <_svfiprintf_r+0x9c>
 800487a:	9b03      	ldr	r3, [sp, #12]
 800487c:	1d19      	adds	r1, r3, #4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	9103      	str	r1, [sp, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	bfbb      	ittet	lt
 8004886:	425b      	neglt	r3, r3
 8004888:	f042 0202 	orrlt.w	r2, r2, #2
 800488c:	9307      	strge	r3, [sp, #28]
 800488e:	9307      	strlt	r3, [sp, #28]
 8004890:	bfb8      	it	lt
 8004892:	9204      	strlt	r2, [sp, #16]
 8004894:	7823      	ldrb	r3, [r4, #0]
 8004896:	2b2e      	cmp	r3, #46	; 0x2e
 8004898:	d10c      	bne.n	80048b4 <_svfiprintf_r+0x130>
 800489a:	7863      	ldrb	r3, [r4, #1]
 800489c:	2b2a      	cmp	r3, #42	; 0x2a
 800489e:	d135      	bne.n	800490c <_svfiprintf_r+0x188>
 80048a0:	9b03      	ldr	r3, [sp, #12]
 80048a2:	3402      	adds	r4, #2
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	9203      	str	r2, [sp, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfb8      	it	lt
 80048ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80048b2:	9305      	str	r3, [sp, #20]
 80048b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004974 <_svfiprintf_r+0x1f0>
 80048b8:	2203      	movs	r2, #3
 80048ba:	4650      	mov	r0, sl
 80048bc:	7821      	ldrb	r1, [r4, #0]
 80048be:	f000 f9f9 	bl	8004cb4 <memchr>
 80048c2:	b140      	cbz	r0, 80048d6 <_svfiprintf_r+0x152>
 80048c4:	2340      	movs	r3, #64	; 0x40
 80048c6:	eba0 000a 	sub.w	r0, r0, sl
 80048ca:	fa03 f000 	lsl.w	r0, r3, r0
 80048ce:	9b04      	ldr	r3, [sp, #16]
 80048d0:	3401      	adds	r4, #1
 80048d2:	4303      	orrs	r3, r0
 80048d4:	9304      	str	r3, [sp, #16]
 80048d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048da:	2206      	movs	r2, #6
 80048dc:	4826      	ldr	r0, [pc, #152]	; (8004978 <_svfiprintf_r+0x1f4>)
 80048de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048e2:	f000 f9e7 	bl	8004cb4 <memchr>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d038      	beq.n	800495c <_svfiprintf_r+0x1d8>
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <_svfiprintf_r+0x1f8>)
 80048ec:	bb1b      	cbnz	r3, 8004936 <_svfiprintf_r+0x1b2>
 80048ee:	9b03      	ldr	r3, [sp, #12]
 80048f0:	3307      	adds	r3, #7
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	3308      	adds	r3, #8
 80048f8:	9303      	str	r3, [sp, #12]
 80048fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048fc:	4433      	add	r3, r6
 80048fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004900:	e767      	b.n	80047d2 <_svfiprintf_r+0x4e>
 8004902:	460c      	mov	r4, r1
 8004904:	2001      	movs	r0, #1
 8004906:	fb0c 3202 	mla	r2, ip, r2, r3
 800490a:	e7a5      	b.n	8004858 <_svfiprintf_r+0xd4>
 800490c:	2300      	movs	r3, #0
 800490e:	f04f 0c0a 	mov.w	ip, #10
 8004912:	4619      	mov	r1, r3
 8004914:	3401      	adds	r4, #1
 8004916:	9305      	str	r3, [sp, #20]
 8004918:	4620      	mov	r0, r4
 800491a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800491e:	3a30      	subs	r2, #48	; 0x30
 8004920:	2a09      	cmp	r2, #9
 8004922:	d903      	bls.n	800492c <_svfiprintf_r+0x1a8>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0c5      	beq.n	80048b4 <_svfiprintf_r+0x130>
 8004928:	9105      	str	r1, [sp, #20]
 800492a:	e7c3      	b.n	80048b4 <_svfiprintf_r+0x130>
 800492c:	4604      	mov	r4, r0
 800492e:	2301      	movs	r3, #1
 8004930:	fb0c 2101 	mla	r1, ip, r1, r2
 8004934:	e7f0      	b.n	8004918 <_svfiprintf_r+0x194>
 8004936:	ab03      	add	r3, sp, #12
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	462a      	mov	r2, r5
 800493c:	4638      	mov	r0, r7
 800493e:	4b10      	ldr	r3, [pc, #64]	; (8004980 <_svfiprintf_r+0x1fc>)
 8004940:	a904      	add	r1, sp, #16
 8004942:	f3af 8000 	nop.w
 8004946:	1c42      	adds	r2, r0, #1
 8004948:	4606      	mov	r6, r0
 800494a:	d1d6      	bne.n	80048fa <_svfiprintf_r+0x176>
 800494c:	89ab      	ldrh	r3, [r5, #12]
 800494e:	065b      	lsls	r3, r3, #25
 8004950:	f53f af2c 	bmi.w	80047ac <_svfiprintf_r+0x28>
 8004954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004956:	b01d      	add	sp, #116	; 0x74
 8004958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495c:	ab03      	add	r3, sp, #12
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	462a      	mov	r2, r5
 8004962:	4638      	mov	r0, r7
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <_svfiprintf_r+0x1fc>)
 8004966:	a904      	add	r1, sp, #16
 8004968:	f000 f87c 	bl	8004a64 <_printf_i>
 800496c:	e7eb      	b.n	8004946 <_svfiprintf_r+0x1c2>
 800496e:	bf00      	nop
 8004970:	0800599c 	.word	0x0800599c
 8004974:	080059a2 	.word	0x080059a2
 8004978:	080059a6 	.word	0x080059a6
 800497c:	00000000 	.word	0x00000000
 8004980:	080046cd 	.word	0x080046cd

08004984 <_printf_common>:
 8004984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	4616      	mov	r6, r2
 800498a:	4699      	mov	r9, r3
 800498c:	688a      	ldr	r2, [r1, #8]
 800498e:	690b      	ldr	r3, [r1, #16]
 8004990:	4607      	mov	r7, r0
 8004992:	4293      	cmp	r3, r2
 8004994:	bfb8      	it	lt
 8004996:	4613      	movlt	r3, r2
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800499e:	460c      	mov	r4, r1
 80049a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049a4:	b10a      	cbz	r2, 80049aa <_printf_common+0x26>
 80049a6:	3301      	adds	r3, #1
 80049a8:	6033      	str	r3, [r6, #0]
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	0699      	lsls	r1, r3, #26
 80049ae:	bf42      	ittt	mi
 80049b0:	6833      	ldrmi	r3, [r6, #0]
 80049b2:	3302      	addmi	r3, #2
 80049b4:	6033      	strmi	r3, [r6, #0]
 80049b6:	6825      	ldr	r5, [r4, #0]
 80049b8:	f015 0506 	ands.w	r5, r5, #6
 80049bc:	d106      	bne.n	80049cc <_printf_common+0x48>
 80049be:	f104 0a19 	add.w	sl, r4, #25
 80049c2:	68e3      	ldr	r3, [r4, #12]
 80049c4:	6832      	ldr	r2, [r6, #0]
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	dc28      	bgt.n	8004a1e <_printf_common+0x9a>
 80049cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049d0:	1e13      	subs	r3, r2, #0
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	bf18      	it	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	0692      	lsls	r2, r2, #26
 80049da:	d42d      	bmi.n	8004a38 <_printf_common+0xb4>
 80049dc:	4649      	mov	r1, r9
 80049de:	4638      	mov	r0, r7
 80049e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049e4:	47c0      	blx	r8
 80049e6:	3001      	adds	r0, #1
 80049e8:	d020      	beq.n	8004a2c <_printf_common+0xa8>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	68e5      	ldr	r5, [r4, #12]
 80049ee:	f003 0306 	and.w	r3, r3, #6
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	bf18      	it	ne
 80049f6:	2500      	movne	r5, #0
 80049f8:	6832      	ldr	r2, [r6, #0]
 80049fa:	f04f 0600 	mov.w	r6, #0
 80049fe:	68a3      	ldr	r3, [r4, #8]
 8004a00:	bf08      	it	eq
 8004a02:	1aad      	subeq	r5, r5, r2
 8004a04:	6922      	ldr	r2, [r4, #16]
 8004a06:	bf08      	it	eq
 8004a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	bfc4      	itt	gt
 8004a10:	1a9b      	subgt	r3, r3, r2
 8004a12:	18ed      	addgt	r5, r5, r3
 8004a14:	341a      	adds	r4, #26
 8004a16:	42b5      	cmp	r5, r6
 8004a18:	d11a      	bne.n	8004a50 <_printf_common+0xcc>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e008      	b.n	8004a30 <_printf_common+0xac>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4652      	mov	r2, sl
 8004a22:	4649      	mov	r1, r9
 8004a24:	4638      	mov	r0, r7
 8004a26:	47c0      	blx	r8
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d103      	bne.n	8004a34 <_printf_common+0xb0>
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a34:	3501      	adds	r5, #1
 8004a36:	e7c4      	b.n	80049c2 <_printf_common+0x3e>
 8004a38:	2030      	movs	r0, #48	; 0x30
 8004a3a:	18e1      	adds	r1, r4, r3
 8004a3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a46:	4422      	add	r2, r4
 8004a48:	3302      	adds	r3, #2
 8004a4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a4e:	e7c5      	b.n	80049dc <_printf_common+0x58>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4622      	mov	r2, r4
 8004a54:	4649      	mov	r1, r9
 8004a56:	4638      	mov	r0, r7
 8004a58:	47c0      	blx	r8
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d0e6      	beq.n	8004a2c <_printf_common+0xa8>
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7d9      	b.n	8004a16 <_printf_common+0x92>
	...

08004a64 <_printf_i>:
 8004a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	7e0f      	ldrb	r7, [r1, #24]
 8004a6a:	4691      	mov	r9, r2
 8004a6c:	2f78      	cmp	r7, #120	; 0x78
 8004a6e:	4680      	mov	r8, r0
 8004a70:	460c      	mov	r4, r1
 8004a72:	469a      	mov	sl, r3
 8004a74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a7a:	d807      	bhi.n	8004a8c <_printf_i+0x28>
 8004a7c:	2f62      	cmp	r7, #98	; 0x62
 8004a7e:	d80a      	bhi.n	8004a96 <_printf_i+0x32>
 8004a80:	2f00      	cmp	r7, #0
 8004a82:	f000 80d9 	beq.w	8004c38 <_printf_i+0x1d4>
 8004a86:	2f58      	cmp	r7, #88	; 0x58
 8004a88:	f000 80a4 	beq.w	8004bd4 <_printf_i+0x170>
 8004a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a94:	e03a      	b.n	8004b0c <_printf_i+0xa8>
 8004a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a9a:	2b15      	cmp	r3, #21
 8004a9c:	d8f6      	bhi.n	8004a8c <_printf_i+0x28>
 8004a9e:	a101      	add	r1, pc, #4	; (adr r1, 8004aa4 <_printf_i+0x40>)
 8004aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aa4:	08004afd 	.word	0x08004afd
 8004aa8:	08004b11 	.word	0x08004b11
 8004aac:	08004a8d 	.word	0x08004a8d
 8004ab0:	08004a8d 	.word	0x08004a8d
 8004ab4:	08004a8d 	.word	0x08004a8d
 8004ab8:	08004a8d 	.word	0x08004a8d
 8004abc:	08004b11 	.word	0x08004b11
 8004ac0:	08004a8d 	.word	0x08004a8d
 8004ac4:	08004a8d 	.word	0x08004a8d
 8004ac8:	08004a8d 	.word	0x08004a8d
 8004acc:	08004a8d 	.word	0x08004a8d
 8004ad0:	08004c1f 	.word	0x08004c1f
 8004ad4:	08004b41 	.word	0x08004b41
 8004ad8:	08004c01 	.word	0x08004c01
 8004adc:	08004a8d 	.word	0x08004a8d
 8004ae0:	08004a8d 	.word	0x08004a8d
 8004ae4:	08004c41 	.word	0x08004c41
 8004ae8:	08004a8d 	.word	0x08004a8d
 8004aec:	08004b41 	.word	0x08004b41
 8004af0:	08004a8d 	.word	0x08004a8d
 8004af4:	08004a8d 	.word	0x08004a8d
 8004af8:	08004c09 	.word	0x08004c09
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	1d1a      	adds	r2, r3, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	602a      	str	r2, [r5, #0]
 8004b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0a4      	b.n	8004c5a <_printf_i+0x1f6>
 8004b10:	6820      	ldr	r0, [r4, #0]
 8004b12:	6829      	ldr	r1, [r5, #0]
 8004b14:	0606      	lsls	r6, r0, #24
 8004b16:	f101 0304 	add.w	r3, r1, #4
 8004b1a:	d50a      	bpl.n	8004b32 <_printf_i+0xce>
 8004b1c:	680e      	ldr	r6, [r1, #0]
 8004b1e:	602b      	str	r3, [r5, #0]
 8004b20:	2e00      	cmp	r6, #0
 8004b22:	da03      	bge.n	8004b2c <_printf_i+0xc8>
 8004b24:	232d      	movs	r3, #45	; 0x2d
 8004b26:	4276      	negs	r6, r6
 8004b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b2c:	230a      	movs	r3, #10
 8004b2e:	485e      	ldr	r0, [pc, #376]	; (8004ca8 <_printf_i+0x244>)
 8004b30:	e019      	b.n	8004b66 <_printf_i+0x102>
 8004b32:	680e      	ldr	r6, [r1, #0]
 8004b34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b38:	602b      	str	r3, [r5, #0]
 8004b3a:	bf18      	it	ne
 8004b3c:	b236      	sxthne	r6, r6
 8004b3e:	e7ef      	b.n	8004b20 <_printf_i+0xbc>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	6820      	ldr	r0, [r4, #0]
 8004b44:	1d19      	adds	r1, r3, #4
 8004b46:	6029      	str	r1, [r5, #0]
 8004b48:	0601      	lsls	r1, r0, #24
 8004b4a:	d501      	bpl.n	8004b50 <_printf_i+0xec>
 8004b4c:	681e      	ldr	r6, [r3, #0]
 8004b4e:	e002      	b.n	8004b56 <_printf_i+0xf2>
 8004b50:	0646      	lsls	r6, r0, #25
 8004b52:	d5fb      	bpl.n	8004b4c <_printf_i+0xe8>
 8004b54:	881e      	ldrh	r6, [r3, #0]
 8004b56:	2f6f      	cmp	r7, #111	; 0x6f
 8004b58:	bf0c      	ite	eq
 8004b5a:	2308      	moveq	r3, #8
 8004b5c:	230a      	movne	r3, #10
 8004b5e:	4852      	ldr	r0, [pc, #328]	; (8004ca8 <_printf_i+0x244>)
 8004b60:	2100      	movs	r1, #0
 8004b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b66:	6865      	ldr	r5, [r4, #4]
 8004b68:	2d00      	cmp	r5, #0
 8004b6a:	bfa8      	it	ge
 8004b6c:	6821      	ldrge	r1, [r4, #0]
 8004b6e:	60a5      	str	r5, [r4, #8]
 8004b70:	bfa4      	itt	ge
 8004b72:	f021 0104 	bicge.w	r1, r1, #4
 8004b76:	6021      	strge	r1, [r4, #0]
 8004b78:	b90e      	cbnz	r6, 8004b7e <_printf_i+0x11a>
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	d04d      	beq.n	8004c1a <_printf_i+0x1b6>
 8004b7e:	4615      	mov	r5, r2
 8004b80:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b84:	fb03 6711 	mls	r7, r3, r1, r6
 8004b88:	5dc7      	ldrb	r7, [r0, r7]
 8004b8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b8e:	4637      	mov	r7, r6
 8004b90:	42bb      	cmp	r3, r7
 8004b92:	460e      	mov	r6, r1
 8004b94:	d9f4      	bls.n	8004b80 <_printf_i+0x11c>
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d10b      	bne.n	8004bb2 <_printf_i+0x14e>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	07de      	lsls	r6, r3, #31
 8004b9e:	d508      	bpl.n	8004bb2 <_printf_i+0x14e>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	6861      	ldr	r1, [r4, #4]
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	bfde      	ittt	le
 8004ba8:	2330      	movle	r3, #48	; 0x30
 8004baa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bb2:	1b52      	subs	r2, r2, r5
 8004bb4:	6122      	str	r2, [r4, #16]
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4640      	mov	r0, r8
 8004bbc:	f8cd a000 	str.w	sl, [sp]
 8004bc0:	aa03      	add	r2, sp, #12
 8004bc2:	f7ff fedf 	bl	8004984 <_printf_common>
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d14c      	bne.n	8004c64 <_printf_i+0x200>
 8004bca:	f04f 30ff 	mov.w	r0, #4294967295
 8004bce:	b004      	add	sp, #16
 8004bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd4:	4834      	ldr	r0, [pc, #208]	; (8004ca8 <_printf_i+0x244>)
 8004bd6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bda:	6829      	ldr	r1, [r5, #0]
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	f851 6b04 	ldr.w	r6, [r1], #4
 8004be2:	6029      	str	r1, [r5, #0]
 8004be4:	061d      	lsls	r5, r3, #24
 8004be6:	d514      	bpl.n	8004c12 <_printf_i+0x1ae>
 8004be8:	07df      	lsls	r7, r3, #31
 8004bea:	bf44      	itt	mi
 8004bec:	f043 0320 	orrmi.w	r3, r3, #32
 8004bf0:	6023      	strmi	r3, [r4, #0]
 8004bf2:	b91e      	cbnz	r6, 8004bfc <_printf_i+0x198>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	f023 0320 	bic.w	r3, r3, #32
 8004bfa:	6023      	str	r3, [r4, #0]
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	e7af      	b.n	8004b60 <_printf_i+0xfc>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	f043 0320 	orr.w	r3, r3, #32
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	2378      	movs	r3, #120	; 0x78
 8004c0a:	4828      	ldr	r0, [pc, #160]	; (8004cac <_printf_i+0x248>)
 8004c0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c10:	e7e3      	b.n	8004bda <_printf_i+0x176>
 8004c12:	0659      	lsls	r1, r3, #25
 8004c14:	bf48      	it	mi
 8004c16:	b2b6      	uxthmi	r6, r6
 8004c18:	e7e6      	b.n	8004be8 <_printf_i+0x184>
 8004c1a:	4615      	mov	r5, r2
 8004c1c:	e7bb      	b.n	8004b96 <_printf_i+0x132>
 8004c1e:	682b      	ldr	r3, [r5, #0]
 8004c20:	6826      	ldr	r6, [r4, #0]
 8004c22:	1d18      	adds	r0, r3, #4
 8004c24:	6961      	ldr	r1, [r4, #20]
 8004c26:	6028      	str	r0, [r5, #0]
 8004c28:	0635      	lsls	r5, r6, #24
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	d501      	bpl.n	8004c32 <_printf_i+0x1ce>
 8004c2e:	6019      	str	r1, [r3, #0]
 8004c30:	e002      	b.n	8004c38 <_printf_i+0x1d4>
 8004c32:	0670      	lsls	r0, r6, #25
 8004c34:	d5fb      	bpl.n	8004c2e <_printf_i+0x1ca>
 8004c36:	8019      	strh	r1, [r3, #0]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4615      	mov	r5, r2
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	e7ba      	b.n	8004bb6 <_printf_i+0x152>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	2100      	movs	r1, #0
 8004c44:	1d1a      	adds	r2, r3, #4
 8004c46:	602a      	str	r2, [r5, #0]
 8004c48:	681d      	ldr	r5, [r3, #0]
 8004c4a:	6862      	ldr	r2, [r4, #4]
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 f831 	bl	8004cb4 <memchr>
 8004c52:	b108      	cbz	r0, 8004c58 <_printf_i+0x1f4>
 8004c54:	1b40      	subs	r0, r0, r5
 8004c56:	6060      	str	r0, [r4, #4]
 8004c58:	6863      	ldr	r3, [r4, #4]
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c62:	e7a8      	b.n	8004bb6 <_printf_i+0x152>
 8004c64:	462a      	mov	r2, r5
 8004c66:	4649      	mov	r1, r9
 8004c68:	4640      	mov	r0, r8
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	47d0      	blx	sl
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d0ab      	beq.n	8004bca <_printf_i+0x166>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	079b      	lsls	r3, r3, #30
 8004c76:	d413      	bmi.n	8004ca0 <_printf_i+0x23c>
 8004c78:	68e0      	ldr	r0, [r4, #12]
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	4298      	cmp	r0, r3
 8004c7e:	bfb8      	it	lt
 8004c80:	4618      	movlt	r0, r3
 8004c82:	e7a4      	b.n	8004bce <_printf_i+0x16a>
 8004c84:	2301      	movs	r3, #1
 8004c86:	4632      	mov	r2, r6
 8004c88:	4649      	mov	r1, r9
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	47d0      	blx	sl
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d09b      	beq.n	8004bca <_printf_i+0x166>
 8004c92:	3501      	adds	r5, #1
 8004c94:	68e3      	ldr	r3, [r4, #12]
 8004c96:	9903      	ldr	r1, [sp, #12]
 8004c98:	1a5b      	subs	r3, r3, r1
 8004c9a:	42ab      	cmp	r3, r5
 8004c9c:	dcf2      	bgt.n	8004c84 <_printf_i+0x220>
 8004c9e:	e7eb      	b.n	8004c78 <_printf_i+0x214>
 8004ca0:	2500      	movs	r5, #0
 8004ca2:	f104 0619 	add.w	r6, r4, #25
 8004ca6:	e7f5      	b.n	8004c94 <_printf_i+0x230>
 8004ca8:	080059ad 	.word	0x080059ad
 8004cac:	080059be 	.word	0x080059be

08004cb0 <__retarget_lock_acquire_recursive>:
 8004cb0:	4770      	bx	lr

08004cb2 <__retarget_lock_release_recursive>:
 8004cb2:	4770      	bx	lr

08004cb4 <memchr>:
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	b2c9      	uxtb	r1, r1
 8004cba:	4402      	add	r2, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	d101      	bne.n	8004cc6 <memchr+0x12>
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	e003      	b.n	8004cce <memchr+0x1a>
 8004cc6:	7804      	ldrb	r4, [r0, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	428c      	cmp	r4, r1
 8004ccc:	d1f6      	bne.n	8004cbc <memchr+0x8>
 8004cce:	bd10      	pop	{r4, pc}

08004cd0 <memmove>:
 8004cd0:	4288      	cmp	r0, r1
 8004cd2:	b510      	push	{r4, lr}
 8004cd4:	eb01 0402 	add.w	r4, r1, r2
 8004cd8:	d902      	bls.n	8004ce0 <memmove+0x10>
 8004cda:	4284      	cmp	r4, r0
 8004cdc:	4623      	mov	r3, r4
 8004cde:	d807      	bhi.n	8004cf0 <memmove+0x20>
 8004ce0:	1e43      	subs	r3, r0, #1
 8004ce2:	42a1      	cmp	r1, r4
 8004ce4:	d008      	beq.n	8004cf8 <memmove+0x28>
 8004ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cee:	e7f8      	b.n	8004ce2 <memmove+0x12>
 8004cf0:	4601      	mov	r1, r0
 8004cf2:	4402      	add	r2, r0
 8004cf4:	428a      	cmp	r2, r1
 8004cf6:	d100      	bne.n	8004cfa <memmove+0x2a>
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d02:	e7f7      	b.n	8004cf4 <memmove+0x24>

08004d04 <_realloc_r>:
 8004d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d08:	4680      	mov	r8, r0
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	460e      	mov	r6, r1
 8004d0e:	b921      	cbnz	r1, 8004d1a <_realloc_r+0x16>
 8004d10:	4611      	mov	r1, r2
 8004d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d16:	f7ff bbf3 	b.w	8004500 <_malloc_r>
 8004d1a:	b92a      	cbnz	r2, 8004d28 <_realloc_r+0x24>
 8004d1c:	f7ff fb88 	bl	8004430 <_free_r>
 8004d20:	4625      	mov	r5, r4
 8004d22:	4628      	mov	r0, r5
 8004d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d28:	f000 f81b 	bl	8004d62 <_malloc_usable_size_r>
 8004d2c:	4284      	cmp	r4, r0
 8004d2e:	4607      	mov	r7, r0
 8004d30:	d802      	bhi.n	8004d38 <_realloc_r+0x34>
 8004d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d36:	d812      	bhi.n	8004d5e <_realloc_r+0x5a>
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7ff fbe0 	bl	8004500 <_malloc_r>
 8004d40:	4605      	mov	r5, r0
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d0ed      	beq.n	8004d22 <_realloc_r+0x1e>
 8004d46:	42bc      	cmp	r4, r7
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	bf28      	it	cs
 8004d4e:	463a      	movcs	r2, r7
 8004d50:	f7ff fb58 	bl	8004404 <memcpy>
 8004d54:	4631      	mov	r1, r6
 8004d56:	4640      	mov	r0, r8
 8004d58:	f7ff fb6a 	bl	8004430 <_free_r>
 8004d5c:	e7e1      	b.n	8004d22 <_realloc_r+0x1e>
 8004d5e:	4635      	mov	r5, r6
 8004d60:	e7df      	b.n	8004d22 <_realloc_r+0x1e>

08004d62 <_malloc_usable_size_r>:
 8004d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d66:	1f18      	subs	r0, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bfbc      	itt	lt
 8004d6c:	580b      	ldrlt	r3, [r1, r0]
 8004d6e:	18c0      	addlt	r0, r0, r3
 8004d70:	4770      	bx	lr
	...

08004d74 <_init>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr

08004d80 <_fini>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	bf00      	nop
 8004d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d86:	bc08      	pop	{r3}
 8004d88:	469e      	mov	lr, r3
 8004d8a:	4770      	bx	lr
